
2 -

2.2.
The heart of Vue application is  The Vue Instance.

A Vue instance is always created when you call

new Vue()

In a typical Vue application you will only have one Vue instance.

You will usually tell him to load a component. Doing by passing an option object with a render function which tells to render a app component.

new Vue({ render: h => h(App})


Component hierarchy

The App component is the top level component of this hierarchy.

And it can have a child component.


Router

Router-view
Show the content of the current URL.

The content of the router-view is updated when the URL changes.

2.3.

Install Git

Node Version Manager NVM
https://github.com/creationix/nvm

Install Node with the NVM. See the last version in the following link.
https://nodejs.org/en/
$ nvm install 8.12.3

NVM use this version
$ nvm use 8.11.3

3 -  Creating Vue.js Components and Using Template Syntax.

CLI

Use it if you want to deploy the application to production

$ npm install -g @vue/cli

To install specific version
$ npm install -g @vue/cli@3.0.0-rc.3

Create a project with Vue CLI

$ vue create project-name

Install with
Vue CLI v3.0.0-rc.3
? Please pick a preset: (Use arrow keys)
❯ default (babel, eslint)
  Manually select features


? Check the features needed for your project: (Press <space> to select, <a> to toggle all, <i> to invert selection)
❯◉ Babel
 ◯ TypeScript
 ◯ Progressive Web App (PWA) Support
 ◯ Router
 ◯ Vuex
 ◯ CSS Pre-processors
 ◉ Linter / Formatter
 ◯ Unit Testing
 ◯ E2E Testing


Choose the features wanted.

Each one have an ability to do several things including.

Prompt more information in the command line
Modifing web pack config
Install NPM packages and generating files

This is from the new Vue plugin architecture CLI 3

The idea is to create 0 config environment. The create a lot of config that you do not need to worry about that.

You can choose the feature now or later. If do not have now, a plugin can be created in the future.

Linter used to Conde styling
Execute it whenever a save a file


Vue CLI v3.0.0-rc.3
? Please pick a preset: Manually select features
? Check the features needed for your project: Babel, Linter
? Pick a linter / formatter config: Airbnb
? Pick additional lint features: (Press <space> to select, <a> to toggle all, <i> to invert selection)
❯◉ Lint on save
 ◯ Lint and fix on commit

Vue CLI v3.0.0-rc.3
? Please pick a preset: Manually select features
? Check the features needed for your project: Babel, Linter
? Pick a linter / formatter config: Airbnb
? Pick additional lint features: Lint on save
? Where do you prefer placing config for Babel, PostCSS, ESLint, etc.? In dedicated config files
? Save this as a preset for future projects? (y/N)


Install the following plugins if your IDE has them. The following set can be installed in the Visual Studio Code.

ESLint
Vetur
vue


——

$ npm run serve

It will compile the application for development and an start the development server in the port 8080

Vue style guide
Vue style rules said to create components with 2 words name minimum

 I didn't need to hit refresh on this page in order to see my changes. That's because we are using, behind the scenes Vue CLI is using the webpack DevServer, including Hot Module Replacement. So as we make changes to our code, the changes immediately show up in our browser without us having to refresh.


——

-> 3.2

--> Global components

Single-file components (this course will only work with this one)

The easier way to get thing render in Vue is to create a Vue instance.

Like this

new Vue({
    template: '<div>Hello World</div>',
    el: '#app',
});


new Vue -> create a new instance of Vue
template: '<div>Hello World</div>' -> We pass an object option a simple Hello World template.
el: '#app -> Which element on the screen Vue will mount the template in.

And If I want to break things up in smaller usable component?

We can do this with Global Components.


—

And this last line should look a little familiar. This is the options object, and it is the same type of object that we're passing into our Vue instance down here, except that we're just not specifying an element property (el).
Components are just like view instance but without the ‘el’

 To demonstrate this, let's pull this part of the template out into a separate component. So just above this, we'll create a new component, and notice here that we're calling Vue.component, and then we're passing in the name of the component here.

'World' -> it is the component name

const World = Vue.component(
    'World',
    { template: '<span>World</span>' },
);

The World component is assigned to the World variable.
This const variable will make possible to access the component by <World />



This should help underscore the fact that components are really just Vue instances. With just one or two exceptions, the options object that you pass into a new component has the exact same properties available as the one you pass in to a Vue instance. So anyhow, notice that our new World component is assigned to this World variable. So now we can replace this part of our component with that component like this.

From this:

new Vue({
    template: '<div>Hello World</div>',
    el: '#app',
});

to this:

new Vue({
    template: '<div>Hello <World /></div>',
    el: '#app',
});

This World component is a global component. It's just a global constant that I could use anywhere I want.


 This type of component is great for fairly small applications and especially great for prototyping, but it's not a great option for full, single-page applications at larger scale for a few reasons.

First of all, in larger applications, global variables inevitably cause problems because they can be hard to location, but more importantly, it's easy to run into naming conflicts.

Secondly, global components use string templates. That means all of your HTML has to be defined inside a JavaScript string, which means you don't get any syntax highlighting, and you end up doing lots of escaping.

Another limitation of global components is that while they nicely encapsulate your HTML template and component logic, CSS is completely left out of the encapsulation, requiring you to rely on global CSS styling.

And finally, global components have no build-time compilation support, meaning, for example, you can't do any sort of preprocessing with things like Babel. Single-file components help us with all these limitations.


--> Single-file component

A single-file component is a file with a Vue extension.

There are typically three sections in a Vue file, including a template section, a script section, and a style section.

The template and script sections are required, whereas the style section is optional.

1 - the template section is where we define our HTML template.
2 - The script section is where we define the JavaScript functionality of our component and where we export it so that it can be exported elsewhere.
3 - the style section is where we define the CSS classes used by our template.

HomeWorld.vue

# Required - Where we define HTML
<template>
</template>

# Required - Define JS functionality of our component and export to be reused in other places.
<script>
</script>

# Optional - Define css used in this template.
<style>
</style>


Of course, if you look at this file, no browser is going to be able to render a file like this, so Vue files are compiled by webpack at build time to generate HTML, JavaScript, and CSS files that the browser can work with.

This compilation comes for free, already configured for us when we start the project with the CLI. This all makes using single-file components a no-brainer when building full-featured web applications with Vue.

So we'll be using single- file components throughout our course. And you may remember that this is what our App.vue component looks like that was generated by the CLI.

The App.vue component is a single-file component and so is the HelloWorld component that the CLI created that we renamed to our HomePage component.


--> 3.3 - Creating your first component

A new page means a new view component.

Do not put components directly inside the components folder. It will no scale very well when the application becomes larger.

Structure your app by feature areas.

Create a new 'home' folder

--

This make the component able to be exported into other files.

<script>
  export default {
    name: 'RobotBuilder'
  };
</script>

--> 3.4 - Binding Attributes to Data with v-bind

In order to make our new Build page a little more dynamic, we need to start by binding it to data from the component instead of these images being hardcoded in the HTML template.

In order to provide data to our component, we need to update our component options to have a data function.

So down here, we'll add that right here. So this is just going to be a function, and right now we'll just return an empty object.

data() {
  return {}
}


Data file structure

---
parts.js

# So we're using web pack's require.context here to make web pack aware of the image URLs so that we can just use them throughout this JSON data as relative URLs. So down here on line 10, you can see that we're calling images function and passing in a relative URL.
# When this is compiled by web pack, this will point to the relative URL of this image file.
const images = require.context('./images', true, /\.png$/)

# JSON data
const parts = {
  heads: [
    {
      id: 1,
      description: 'A robot head with an unusually large eye and teloscpic neck -- excellent for exploring high spaces.',
      title: 'Large Cyclops',
      src: images('./head-big-eye.png'),
      type: 'heads',
      cost: 1225.5
    },
    {
      id: 2,
      description: 'A friendly robot head with two eyes and a smile -- great for domestic use.',
      title: 'Friendly Bot',
      src: images('./head-friendly.png'),
      cost: 945.0,
      type: 'heads',
      onSale: true
    }
  ]
};

# Export the data
export default parts
---

v-bind -> it is used for apply an expression for the element that it is declared in.

Variables, from the data() function, are available inside the expression.

# we want to bind it to an expression. We can do that like this. So this says bind the source attribute of this image element to this expression in the quotes. And inside that expression, we can access availableParts. So this is the availableParts object that we exposed in our data function.


# Thanks to web pack, and we talked about this just a minute ago, this is the relative URL to the image for this head
v-bind:src="availableParts.heads[0].src"


# So now our data object is an object with an availableParts property that is set to that JSON data.
RobotBuilder.vue
<script>
  import availableParts from '../data/parts';

  export default {
    name: 'RobotBuilder',
    data() {
      return {
        availableParts,
      };
    }
  };
</script>


--> 3.5 - Binding to Events with v-on


In order to react to actions by the user such as clicking on these buttons, we need to bind to the events of those elements.
v-on -> It is used bind events.

v-on:click="functionToBeCalled"

click is the event type



"" -> Here is where the expression are

And that function needs to exist on our component. To do that, we're going to introduce a new property on our component called methods, and that's an object, and then you define each of the functions inside of here that you're going to call from your template.
methods -> it is another section which will be used to store every function used in this template.


  export default {
    name: 'RobotBuilder',
    data() {
      return {
        availableParts,
        selectedHeadIndex: 0,
        selectedLeftArmIndex: 0,
        selectedTorsoIndex: 0,
        selectedRightArmIndex: 0,
        selectedBaseIndex: 0,
      };
    },
    methods: {
      selectNextHead() {
        this.selectedHeadIndex = getNextValidIndex(this.selectedHeadIndex, availableParts.heads.length);
      },
      selectPreviousHead() {
        this.selectedHeadIndex = getPrevieousValidIndex(this.selectedHeadIndex, availableParts.heads.length);
      }
    }
  }


--> 3.6 - Using Shorthand Bindings

Shot version of the binding

v-bind: -> replaced by :
v-on: -> replaced by @

--> 3.7 - Binding to Computed Properties

# Computed properties are like a Decorator for the object. Where we put our render logic there and return only an object to be manipulated inside the template section, which should not have logic on it.

Sometimes you want to be able to easily bind to something in your HTML template that involves a complex calculation.
Doing complex calculations in your HTML template isn't really a great idea.

What would be nice is if we had a selected robot property on our component that we can use.

# All of these expressions are a little ugly. What would be nice is if we had a selected robot property on our component that we can use.
From
<img :src="availableParts.heads[selectedHeadIndex].src" title="head"/>
To
<img :src="selectedRobot.head.src" title="head"/>

like the methods property, this contains methods.

computed: {
  selectedRobot() {
    return {
      head: availableParts.heads[this.selectedHeadIndex],
      leftArm: availableParts.arms[this.selectedLeftArmIndex],
      torso: availableParts.torsos[this.selectedTorsoIndex],
      rightArm: availableParts.arms[this.selectedRightArmIndex],
      base: availableParts.bases[this.selectedBaseIndex]
    }
  }
}

So this is better, and while this one just helps simplify our template a little bit, there are cases where it can simplify them a lot. You really want to be careful not to do too much logic in your templates, and computed properties make that easy.

### Obs
# Inside the expression, you have access to data from the exported section of the current component.
data() attributes
computed functions
method functions

3.8 - Displaying Data with Interpolation


      Our robot builder is looking pretty good, and we've learned how to bind to attributes and events, but we haven't yet learned how to simply just display raw data on the page. We do that with interpolation. To demonstrate that, let's display the name of our robot just above the robot head. If we take a look at the parts data over here, you can see that each part has a title. And the names of the heads actually make for a pretty good name for our robots. So let's display the name of the currently selected head above our robot. Because of our computed property, this is going to be really easy. So let's add a new div right here, and we'll give it a class of robot-name. And let's add that class down here in our styles. And I'm going to position this absolute. And I want to position it about 25 pixels above the top of the head, and then we'll align the text to the center, and then we'll set the width to 100%. Okay, now for the interpolation part. Back up here inside our div, we're just going to add an expression like this.

      So the double brackets is used for interpolation, and inside there, we'll just put an expression. So we just want to use selectedRobot.head.title. And this is it. That's all there is to interpolation, and you can put any valid expression in here. Although, again, it's recommended that you only use simple expressions in your template. Okay, let's go check this out. All right, awesome, you can see here that our robot has a name, and then you can see, as I click through the robot heads, that the robot name up here is changing due to that interpolation expression. So interpolation is really simple. Before we wrap up on interpolation though, let me mention one more performance option. We can add a v-once tag to any element like this, and when you do this, any bindings inside that element will be evaluated once and then never again. This is handy for performance reasons if you have a page with a lot of bindings that are going to render once and then you don't expect the data to change. In our case though, this isn't what we want. If I come over now to our robot builder and cycle through the robot heads, you can see that the binding isn't updated. It updated once when the page was rendered, and then it's not being updated anymore. So we don't want that here, so let's remove it. But it's good to know about for performance reasons. Now that should be updating again. Okay, cool. So next, we're going to take a look at ways to dynamically show and hide our content on our page.

# So the double brackets is used for interpolation, and inside there, we'll just put an expression. So we just want to use selectedRobot.head.title. And this is it. That's all there is to interpolation, and you can put any valid expression in here. Although, again, it's recommended that you only use simple expressions in your template.
{{}}
<div class="robot-name">{{selectedRobot.head.title}}</div>

# Add v-once tag to any element like this, and when you do this, any bindings inside that element will be evaluated once and then never again.
# This is handy for performance reasons if you have a page with a lot of bindings that are going to render once and then you don't expect the data to change.
v-once
<div v-once class="robot-name">{{selectedRobot.head.title}}</div>


#### Performance tips

computed function
v-once

####


3.9 - Conditionally Displaying Content with v-if and v-show

# So the question is, when should we use v-if, and when should we use v-show? Basically, if the content that you are showing and hiding is expensive to generate, and it's going to be shown and hidden frequently, then you should use v-show because Vue won't have to go through the expensive rendering process each time it's redisplayed.

 They expected a boolean for showing or not the element.

v-if ->
Remove the element from the DOM
v-show ->
This on add the style display: none


# if the content that you are showing and hiding is expensive to generate, and it's going to be shown and hidden frequently, then you should use v-show because Vue won't have to go through the expensive rendering process each time it's redisplayed.

# But if your content is not expensive to render like our current example, or if it's not going to be hidden and redisplayed frequently, then v-if is perfect. Right now we're just showing and hiding a span element, but imagine if this was a Vue component that we were showing and hiding, and imagine that that component had a child component which also had child components. You can see how that can get really expensive to rerender. In that case, v-show would be better. In our case, v-if is perfect because it's just a span; it's not expensive to render at all, so we'll leave it with a v-if. Next, let's take a look at how to repeat elements using v-for.


3.10 - Repeating Elements with v-for

### Atention

let's add a cart property, and we'll default it to an empty array. And it's important that we initialize this variable here in the data function. If we don't do it here, Vue won't notice that the data is changing. Vue's change detection works by hooking into the getters and setters of properties in the data function. And so even if we were to add a cart variable below by saying this.cart=newArray, Vue wouldn't even notice it because it never hooked into it.


# So we'll say this.cart.push, and then just for immutability purposes, I want to use Object.assign here so that the robot that is in the array isn't the same instance as the selected robot property. This isn't really a Vue thing; this is more of a good programming practice in JavaScript to make sure that you don't have inadvertent pointers to the same object in your code.

// 1 - Start with an empty object {}
// 2 - assign robot
// 3 - Content of the robot
// the result we will have a copy of the robot object with the cost add to it. Them we push it into the cart.
this.cart.push(Object.assign({}, robot, { cost }));

cart is the attribute that has the data
robot is the element from the array
index is the index of the array

v-bind:key or :key or key="" is used to add a key to the element repeated. It is a requirement of Vue.

:key="index" -> will get the index from the for expression
key="index" -> here, index is only a string.

<tr v-for="(robot, index) in cart" :key="index">
  <td>{{robot.head.title}}</td>
  <td class="cost">{{robot.cost}}</td>
</tr>

# Without the key attribute
<tr v-for="robot in cart">

# There's just one caveat here. Whenever you're repeating data, Vue needs to be able to, for performance reasons, identify each element in there for updates. And so we need to add a unique key attribute to our repeated table row element.

### Obs

# This is just a performance warning that you'll see in the Vue docs
For performance, you should not use v-if and v-for in the same element

3.11 - Styling Components

# So this index.html file is what is actually loaded when our app first loads
index.html

# So we just essentially scoped all of the styles inside this style element to only this App (to the specific component) component.
<style scoped>
</style>

This
<header data-v-7ba5bd90>
 ...
</header>

# It will only apply this header to the one that has this data-v attribute data-v-7ba5bd90
header[data-v-7ba5bd90] {
    background-color: #999;
    width: 1084px;
    margin: 0 auto;
}


# So that's how Vue handles scoping styles. It puts these randomized hashes on scoped elements and then targets them specifically with that hash. So a header element on another component would either not have this data attribute at all, or it would have a different data attribute because it's in a different scope. And the same concept applies to child components, as we'll see in the next clip. With some exceptions, if you add the scoped element to a parent component, its styles won't bleed into the child component.


# So about scoped versus global styles.

The App.vue file is the best file to have a Global style
<style>

</style>

<style scoped>
</style>


3.12 - Styling Child Components

# If you want to be able to do deep targeting like this, you need to use the deep selector that looks like this. And now if we take a look at it, there, now you can see that we can target it. So you can target child elements within scoped styles like this by starting with the class of the root element and then using the deep selector to select other items within the child component. But you need to be aware that this deep component is truly deep. It is not just the child component, but this will also affect child components of your child component, so it will keep going down the chain. And it's possible that this won't work with some CSS preprocessors, and so in that case, there is also the deep selector, and that has the same effect. Okay, we don't want to keep this here, so let's delete that. That covers everything for styling child components. Next, let's take a look at conditionally applying styles to elements.

How to style child components from a scoped parent style.

Start with the class of the root element and them add  deep selector (>>>) + the class that you want to edit.

# parent scoped style

>>> -> Deep selector -> Obs> it cannot work in some preprocessor so, use the /deep/ selector instead. It has the same meaning.
.content >>> .robot-name {
  ...
}

# child
<template>
  <div class="content">
    <div class="top-row">
      <div class="top part">
        <div class="robot-name">
        </div>
      </div>
    </div>
  </div
</template>

3.13 - Conditionally Applying Styles with Style Bindings

Sometimes we want to apply a style to an element based upon a certain condition. That's quite easy to do with Vue. Let's use a style binding to make it so that the border around the head turns red if it's on sale. So over here in our template, we're going to style this div right here. It's the one that contains the head. So a style binding looks like this. And really, this is just binding to the style attribute. And you provide an object, and we're going to set the border to a 3px solid red border. And this should be working, if we go over here and take a look at it. However, it's not yet conditional. So every head has a red border, not just the ones that are on sale. So we'll get to conditional in just a second, but first I want to mention that there are some CSS attributes that have hyphens in them. For example, background-color. But this isn't valid JavaScript. For this to be valid JavaScript, you have to add brackets around this because this is object notation here. But Vue actually makes this easier by allowing you to use camel case for CSS attribute names that have hyphens in them, so just keep that in mind. We don't need this though, so we'll just change this back to border. So for this to be conditional, we need to not just have it be hardcoded to a string, so we can just change that to bind to a computer property on the component. So instead of this object here, we're just going to bind this to headBorderStyle. Now the style binding will be set to whatever object is returned by headBorderStyle. So let's go add a computed property for that. So that's a method, and it's just going to, for now we'll have it just return border, and we'll hardcode that again to 3px solid red. Okay, so this still isn't dynamic. We still are just getting a red border on everything. But now, because this is a computed property, we could just use a ternary here. So let's bring this down onto a separate line, and instead of always setting border to this string, we'll set it to a ternary statement. We'll say if this.selectedRobot.head is onSale, then return 3px solid red. Otherwise, return 3px solid gray. Okay, let's go check that out. Okay, it looks like this is working great now. So now only the items that's on sale has a red border. Okay, one last thing to be aware of is up here in our style binding, sometimes it's necessary to apply styles based on multiple calculations. In that case, we could add an array, or bind this to an array instead. And this could be a second calculated property so that it applies these styles, the headBorderStyle first, and then moreStyles second. And moreStyles will override headBorderStyle, so the second one overrides the first if there are any conflicts. We don't have a need for that, though, so we'll just go with the simple object syntax. Of course, it's better to use classes than inline styles, so now let's take a look at how to conditionally apply CSS classes.

Bind style
:style="{ border: '3px solid red'; }"
:style="{ [background-color]: red }"
:style="{ backgroundColor: red }" ->  Vue syntax with camelcase

It is needed to add square brackets when use css attributes has hyphen because it is object notation.

Vue makes it easier by allowing camelcase syntax


:style="[headBorderStyle, otherComputedStyle]"


 :class="{ 'sale-border': selectedRobot.head.onSale }"

 But it is better to put this logic inside the computed property

# saleBorderClass -> it returns a string class
<div class="top part" :class="[saleBorderClass]">


3.14 - Conditionally Applying Classes with Class Bindings
Let's see how to replace this style binding with a class binding so that we can use classes instead of inline styles. First, let's start by adding a class down here. We'll call it sale-border, and that will just have a border that is 3px solid red. And then back up here where our style binding is, instead of this we'll use a class binding. And then a class binding is basically an object where the keys are the names of the classes that you would like to toggle. So in this case, we have a sale-border class. And then you just set that to a Boolean expression that will evaluate to true when you want this class to be applied. So in this case we want it to be applied when the selectedRobot.head is onSale. So this is just saying apply the sale-border class when the onSale property is true. And if we wanted to toggle multiple classes, we would just add more properties to this object. So this should be working just like the style binding was. So the Friendly Bot is on sale, and the rest are not on sale. Perfect. Now one thing that you might not have noticed, if we inspect this, this div where we applied the sale border, also has the classes top and part. If we go over and take a look at our template, you can see that this element has both a class binding and a class attribute on it, so the top and part classes are going to always be applied, and the sale-border property is going to be applied conditionally, so you can combine them like this. Of course, this class object could get fairly complex if you were toggling lots of classes. So you could always move this expression to a computed property like we did with the style binding. But like style bindings, there's another syntax that we could use here, an array syntax. So I could just provide an array here, and that array contains the classes that I would like to apply. So this is not conditional; this will always apply a class, so we should be seeing that everywhere. But we could then take this and, let's undo a little bit and grab this expression, and with this array syntax, let's put in a, let's use a computed property like we did with our style bindings. So I'm going to create a computed property called saleBorderClass, and we will add the value of that to our array. So now down in our computed properties, I can change this to saleBorderClass. And then this is just going to return the saleBorder string if the robot head is on sale, so we'll just use a ternary like this. So if it's on sale, then return sale-border. Otherwise it'll return an empty string. And we need this here. Okay, so that should be conditional again. There we go. And now that we have that using the array syntax, we could actually collapse these class expressions into a single expression. So I'm going to take these out of here and make them strings in here. And then I can get rid of this class attribute, and now it's all taken care of in our class binding. Cool, I like that final syntax, so let's go with that. And next, we'll take a look at using CSS preprocessors like Sass.
