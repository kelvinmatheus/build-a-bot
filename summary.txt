
2 -

2.2.
The heart of Vue application is  The Vue Instance.

A Vue instance is always created when you call

new Vue()

In a typical Vue application you will only have one Vue instance.

You will usually tell him to load a component. Doing by passing an option object with a render function which tells to render a app component.

new Vue({ render: h => h(App})


Component hierarchy

The App component is the top level component of this hierarchy.

And it can have a child component.


Router

Router-view
Show the content of the current URL.

The content of the router-view is updated when the URL changes.

2.3.

Install Git

Node Version Manager NVM
https://github.com/creationix/nvm

Install Node with the NVM. See the last version in the following link.
https://nodejs.org/en/
$ nvm install 8.12.3

NVM use this version
$ nvm use 8.11.3

3 -  Creating Vue.js Components and Using Template Syntax.

CLI

Use it if you want to deploy the application to production

$ npm install -g @vue/cli

To install specific version
$ npm install -g @vue/cli@3.0.0-rc.3

Create a project with Vue CLI

$ vue create project-name

Install with
Vue CLI v3.0.0-rc.3
? Please pick a preset: (Use arrow keys)
❯ default (babel, eslint)
  Manually select features


? Check the features needed for your project: (Press <space> to select, <a> to toggle all, <i> to invert selection)
❯◉ Babel
 ◯ TypeScript
 ◯ Progressive Web App (PWA) Support
 ◯ Router
 ◯ Vuex
 ◯ CSS Pre-processors
 ◉ Linter / Formatter
 ◯ Unit Testing
 ◯ E2E Testing


Choose the features wanted.

Each one have an ability to do several things including.

Prompt more information in the command line
Modifing web pack config
Install NPM packages and generating files

This is from the new Vue plugin architecture CLI 3

The idea is to create 0 config environment. The create a lot of config that you do not need to worry about that.

You can choose the feature now or later. If do not have now, a plugin can be created in the future.

Linter used to Conde styling
Execute it whenever a save a file


Vue CLI v3.0.0-rc.3
? Please pick a preset: Manually select features
? Check the features needed for your project: Babel, Linter
? Pick a linter / formatter config: Airbnb
? Pick additional lint features: (Press <space> to select, <a> to toggle all, <i> to invert selection)
❯◉ Lint on save
 ◯ Lint and fix on commit

Vue CLI v3.0.0-rc.3
? Please pick a preset: Manually select features
? Check the features needed for your project: Babel, Linter
? Pick a linter / formatter config: Airbnb
? Pick additional lint features: Lint on save
? Where do you prefer placing config for Babel, PostCSS, ESLint, etc.? In dedicated config files
? Save this as a preset for future projects? (y/N)


Install the following plugins if your IDE has them. The following set can be installed in the Visual Studio Code.

ESLint
Vetur
vue


——

$ npm run serve

It will compile the application for development and an start the development server in the port 8080

Vue style guide
Vue style rules said to create components with 2 words name minimum

 I didn't need to hit refresh on this page in order to see my changes. That's because we are using, behind the scenes Vue CLI is using the webpack DevServer, including Hot Module Replacement. So as we make changes to our code, the changes immediately show up in our browser without us having to refresh.


——

-> 3.2

--> Global components

Single-file components (this course will only work with this one)

The easier way to get thing render in Vue is to create a Vue instance.

Like this

new Vue({
    template: '<div>Hello World</div>',
    el: '#app',
});


new Vue -> create a new instance of Vue
template: '<div>Hello World</div>' -> We pass an object option a simple Hello World template.
el: '#app -> Which element on the screen Vue will mount the template in.

And If I want to break things up in smaller usable component?

We can do this with Global Components.


—

And this last line should look a little familiar. This is the options object, and it is the same type of object that we're passing into our Vue instance down here, except that we're just not specifying an element property (el).
Components are just like view instance but without the ‘el’

 To demonstrate this, let's pull this part of the template out into a separate component. So just above this, we'll create a new component, and notice here that we're calling Vue.component, and then we're passing in the name of the component here.

'World' -> it is the component name

const World = Vue.component(
    'World',
    { template: '<span>World</span>' },
);

The World component is assigned to the World variable.
This const variable will make possible to access the component by <World />



This should help underscore the fact that components are really just Vue instances. With just one or two exceptions, the options object that you pass into a new component has the exact same properties available as the one you pass in to a Vue instance. So anyhow, notice that our new World component is assigned to this World variable. So now we can replace this part of our component with that component like this.

From this:

new Vue({
    template: '<div>Hello World</div>',
    el: '#app',
});

to this:

new Vue({
    template: '<div>Hello <World /></div>',
    el: '#app',
});

This World component is a global component. It's just a global constant that I could use anywhere I want.


 This type of component is great for fairly small applications and especially great for prototyping, but it's not a great option for full, single-page applications at larger scale for a few reasons.

First of all, in larger applications, global variables inevitably cause problems because they can be hard to location, but more importantly, it's easy to run into naming conflicts.

Secondly, global components use string templates. That means all of your HTML has to be defined inside a JavaScript string, which means you don't get any syntax highlighting, and you end up doing lots of escaping.

Another limitation of global components is that while they nicely encapsulate your HTML template and component logic, CSS is completely left out of the encapsulation, requiring you to rely on global CSS styling.

And finally, global components have no build-time compilation support, meaning, for example, you can't do any sort of preprocessing with things like Babel. Single-file components help us with all these limitations.


--> Single-file component

A single-file component is a file with a Vue extension.

There are typically three sections in a Vue file, including a template section, a script section, and a style section.

The template and script sections are required, whereas the style section is optional.

1 - the template section is where we define our HTML template.
2 - The script section is where we define the JavaScript functionality of our component and where we export it so that it can be exported elsewhere.
3 - the style section is where we define the CSS classes used by our template.

HomeWorld.vue

# Required - Where we define HTML
<template>
</template>

# Required - Define JS functionality of our component and export to be reused in other places.
<script>
</script>

# Optional - Define css used in this template.
<style>
</style>


Of course, if you look at this file, no browser is going to be able to render a file like this, so Vue files are compiled by webpack at build time to generate HTML, JavaScript, and CSS files that the browser can work with.

This compilation comes for free, already configured for us when we start the project with the CLI. This all makes using single-file components a no-brainer when building full-featured web applications with Vue.

So we'll be using single- file components throughout our course. And you may remember that this is what our App.vue component looks like that was generated by the CLI.

The App.vue component is a single-file component and so is the HelloWorld component that the CLI created that we renamed to our HomePage component.


--> 3.3 - Creating your first component

A new page means a new view component.

Do not put components directly inside the components folder. It will no scale very well when the application becomes larger.

Structure your app by feature areas.

Create a new 'home' folder

--

This make the component able to be exported into other files.

<script>
  export default {
    name: 'RobotBuilder'
  };
</script>

--> 3.4 - Binding Attributes to Data with v-bind

In order to make our new Build page a little more dynamic, we need to start by binding it to data from the component instead of these images being hardcoded in the HTML template.

In order to provide data to our component, we need to update our component options to have a data function.

So down here, we'll add that right here. So this is just going to be a function, and right now we'll just return an empty object.

data() {
  return {}
}


Data file structure

---
parts.js

# So we're using web pack's require.context here to make web pack aware of the image URLs so that we can just use them throughout this JSON data as relative URLs. So down here on line 10, you can see that we're calling images function and passing in a relative URL.
# When this is compiled by web pack, this will point to the relative URL of this image file.
const images = require.context('./images', true, /\.png$/)

# JSON data
const parts = {
  heads: [
    {
      id: 1,
      description: 'A robot head with an unusually large eye and teloscpic neck -- excellent for exploring high spaces.',
      title: 'Large Cyclops',
      src: images('./head-big-eye.png'),
      type: 'heads',
      cost: 1225.5
    },
    {
      id: 2,
      description: 'A friendly robot head with two eyes and a smile -- great for domestic use.',
      title: 'Friendly Bot',
      src: images('./head-friendly.png'),
      cost: 945.0,
      type: 'heads',
      onSale: true
    }
  ]
};

# Export the data
export default parts
---

v-bind -> it is used for apply an expression for the element that it is declared in.

Variables, from the data() function, are available inside the expression.

# we want to bind it to an expression. We can do that like this. So this says bind the source attribute of this image element to this expression in the quotes. And inside that expression, we can access availableParts. So this is the availableParts object that we exposed in our data function.


# Thanks to web pack, and we talked about this just a minute ago, this is the relative URL to the image for this head
v-bind:src="availableParts.heads[0].src"


# So now our data object is an object with an availableParts property that is set to that JSON data.
RobotBuilder.vue
<script>
  import availableParts from '../data/parts';

  export default {
    name: 'RobotBuilder',
    data() {
      return {
        availableParts,
      };
    }
  };
</script>


--> 3.5 - Binding to Events with v-on


In order to react to actions by the user such as clicking on these buttons, we need to bind to the events of those elements.
v-on -> It is used bind events.

v-on:click="functionToBeCalled"

click is the event type



"" -> Here is where the expression are

And that function needs to exist on our component. To do that, we're going to introduce a new property on our component called methods, and that's an object, and then you define each of the functions inside of here that you're going to call from your template.
methods -> it is another section which will be used to store every function used in this template.


  export default {
    name: 'RobotBuilder',
    data() {
      return {
        availableParts,
        selectedHeadIndex: 0,
        selectedLeftArmIndex: 0,
        selectedTorsoIndex: 0,
        selectedRightArmIndex: 0,
        selectedBaseIndex: 0,
      };
    },
    methods: {
      selectNextHead() {
        this.selectedHeadIndex = getNextValidIndex(this.selectedHeadIndex, availableParts.heads.length);
      },
      selectPreviousHead() {
        this.selectedHeadIndex = getPrevieousValidIndex(this.selectedHeadIndex, availableParts.heads.length);
      }
    }
  }


--> 3.6 - Using Shorthand Bindings

Shot version of the binding

v-bind: -> replaced by :
v-on: -> replaced by @

--> 3.7 - Binding to Computed Properties

# Computed properties are like a Decorator for the object. Where we put our render logic there and return only an object to be manipulated inside the template section, which should not have logic on it.

Sometimes you want to be able to easily bind to something in your HTML template that involves a complex calculation.
Doing complex calculations in your HTML template isn't really a great idea.

What would be nice is if we had a selected robot property on our component that we can use.

# All of these expressions are a little ugly. What would be nice is if we had a selected robot property on our component that we can use.
From
<img :src="availableParts.heads[selectedHeadIndex].src" title="head"/>
To
<img :src="selectedRobot.head.src" title="head"/>

like the methods property, this contains methods.

computed: {
  selectedRobot() {
    return {
      head: availableParts.heads[this.selectedHeadIndex],
      leftArm: availableParts.arms[this.selectedLeftArmIndex],
      torso: availableParts.torsos[this.selectedTorsoIndex],
      rightArm: availableParts.arms[this.selectedRightArmIndex],
      base: availableParts.bases[this.selectedBaseIndex]
    }
  }
}

So this is better, and while this one just helps simplify our template a little bit, there are cases where it can simplify them a lot. You really want to be careful not to do too much logic in your templates, and computed properties make that easy.

### Obs
# Inside the expression, you have access to data from the exported section of the current component.
data() attributes
computed functions
method functions

3.8 - Displaying Data with Interpolation


      Our robot builder is looking pretty good, and we've learned how to bind to attributes and events, but we haven't yet learned how to simply just display raw data on the page. We do that with interpolation. To demonstrate that, let's display the name of our robot just above the robot head. If we take a look at the parts data over here, you can see that each part has a title. And the names of the heads actually make for a pretty good name for our robots. So let's display the name of the currently selected head above our robot. Because of our computed property, this is going to be really easy. So let's add a new div right here, and we'll give it a class of robot-name. And let's add that class down here in our styles. And I'm going to position this absolute. And I want to position it about 25 pixels above the top of the head, and then we'll align the text to the center, and then we'll set the width to 100%. Okay, now for the interpolation part. Back up here inside our div, we're just going to add an expression like this.

      So the double brackets is used for interpolation, and inside there, we'll just put an expression. So we just want to use selectedRobot.head.title. And this is it. That's all there is to interpolation, and you can put any valid expression in here. Although, again, it's recommended that you only use simple expressions in your template. Okay, let's go check this out. All right, awesome, you can see here that our robot has a name, and then you can see, as I click through the robot heads, that the robot name up here is changing due to that interpolation expression. So interpolation is really simple. Before we wrap up on interpolation though, let me mention one more performance option. We can add a v-once tag to any element like this, and when you do this, any bindings inside that element will be evaluated once and then never again. This is handy for performance reasons if you have a page with a lot of bindings that are going to render once and then you don't expect the data to change. In our case though, this isn't what we want. If I come over now to our robot builder and cycle through the robot heads, you can see that the binding isn't updated. It updated once when the page was rendered, and then it's not being updated anymore. So we don't want that here, so let's remove it. But it's good to know about for performance reasons. Now that should be updating again. Okay, cool. So next, we're going to take a look at ways to dynamically show and hide our content on our page.

# So the double brackets is used for interpolation, and inside there, we'll just put an expression. So we just want to use selectedRobot.head.title. And this is it. That's all there is to interpolation, and you can put any valid expression in here. Although, again, it's recommended that you only use simple expressions in your template.
{{}}
<div class="robot-name">{{selectedRobot.head.title}}</div>

# Add v-once tag to any element like this, and when you do this, any bindings inside that element will be evaluated once and then never again.
# This is handy for performance reasons if you have a page with a lot of bindings that are going to render once and then you don't expect the data to change.
v-once
<div v-once class="robot-name">{{selectedRobot.head.title}}</div>


#### Performance tips

computed function
v-once

####


3.9 - Conditionally Displaying Content with v-if and v-show

# So the question is, when should we use v-if, and when should we use v-show? Basically, if the content that you are showing and hiding is expensive to generate, and it's going to be shown and hidden frequently, then you should use v-show because Vue won't have to go through the expensive rendering process each time it's redisplayed.

 They expected a boolean for showing or not the element.

v-if ->
Remove the element from the DOM
v-show ->
This on add the style display: none


# if the content that you are showing and hiding is expensive to generate, and it's going to be shown and hidden frequently, then you should use v-show because Vue won't have to go through the expensive rendering process each time it's redisplayed.

# But if your content is not expensive to render like our current example, or if it's not going to be hidden and redisplayed frequently, then v-if is perfect. Right now we're just showing and hiding a span element, but imagine if this was a Vue component that we were showing and hiding, and imagine that that component had a child component which also had child components. You can see how that can get really expensive to rerender. In that case, v-show would be better. In our case, v-if is perfect because it's just a span; it's not expensive to render at all, so we'll leave it with a v-if. Next, let's take a look at how to repeat elements using v-for.


3.10 - Repeating Elements with v-for

### Atention

let's add a cart property, and we'll default it to an empty array. And it's important that we initialize this variable here in the data function. If we don't do it here, Vue won't notice that the data is changing. Vue's change detection works by hooking into the getters and setters of properties in the data function. And so even if we were to add a cart variable below by saying this.cart=newArray, Vue wouldn't even notice it because it never hooked into it.


# So we'll say this.cart.push, and then just for immutability purposes, I want to use Object.assign here so that the robot that is in the array isn't the same instance as the selected robot property. This isn't really a Vue thing; this is more of a good programming practice in JavaScript to make sure that you don't have inadvertent pointers to the same object in your code.

// 1 - Start with an empty object {}
// 2 - assign robot
// 3 - Content of the robot
// the result we will have a copy of the robot object with the cost add to it. Them we push it into the cart.
this.cart.push(Object.assign({}, robot, { cost }));

cart is the attribute that has the data
robot is the element from the array
index is the index of the array

v-bind:key or :key or key="" is used to add a key to the element repeated. It is a requirement of Vue.

:key="index" -> will get the index from the for expression
key="index" -> here, index is only a string.

<tr v-for="(robot, index) in cart" :key="index">
  <td>{{robot.head.title}}</td>
  <td class="cost">{{robot.cost}}</td>
</tr>

# Without the key attribute
<tr v-for="robot in cart">

# There's just one caveat here. Whenever you're repeating data, Vue needs to be able to, for performance reasons, identify each element in there for updates. And so we need to add a unique key attribute to our repeated table row element.

### Obs

# This is just a performance warning that you'll see in the Vue docs
For performance, you should not use v-if and v-for in the same element

3.11 - Styling Components

# So this index.html file is what is actually loaded when our app first loads
index.html

# So we just essentially scoped all of the styles inside this style element to only this App (to the specific component) component.
<style scoped>
</style>

This
<header data-v-7ba5bd90>
 ...
</header>

# It will only apply this header to the one that has this data-v attribute data-v-7ba5bd90
header[data-v-7ba5bd90] {
    background-color: #999;
    width: 1084px;
    margin: 0 auto;
}


# So that's how Vue handles scoping styles. It puts these randomized hashes on scoped elements and then targets them specifically with that hash. So a header element on another component would either not have this data attribute at all, or it would have a different data attribute because it's in a different scope. And the same concept applies to child components, as we'll see in the next clip. With some exceptions, if you add the scoped element to a parent component, its styles won't bleed into the child component.


# So about scoped versus global styles.

The App.vue file is the best file to have a Global style
<style>

</style>

<style scoped>
</style>


3.12 - Styling Child Components

# If you want to be able to do deep targeting like this, you need to use the deep selector that looks like this. And now if we take a look at it, there, now you can see that we can target it. So you can target child elements within scoped styles like this by starting with the class of the root element and then using the deep selector to select other items within the child component. But you need to be aware that this deep component is truly deep. It is not just the child component, but this will also affect child components of your child component, so it will keep going down the chain. And it's possible that this won't work with some CSS preprocessors, and so in that case, there is also the deep selector, and that has the same effect. Okay, we don't want to keep this here, so let's delete that. That covers everything for styling child components. Next, let's take a look at conditionally applying styles to elements.

How to style child components from a scoped parent style.

Start with the class of the root element and them add  deep selector (>>>) + the class that you want to edit.

# parent scoped style

>>> -> Deep selector -> Obs> it cannot work in some preprocessor so, use the /deep/ selector instead. It has the same meaning.
.content >>> .robot-name {
  ...
}

# child
<template>
  <div class="content">
    <div class="top-row">
      <div class="top part">
        <div class="robot-name">
        </div>
      </div>
    </div>
  </div
</template>

3.13 - Conditionally Applying Styles with Style Bindings

Sometimes we want to apply a style to an element based upon a certain condition. That's quite easy to do with Vue. Let's use a style binding to make it so that the border around the head turns red if it's on sale. So over here in our template, we're going to style this div right here. It's the one that contains the head. So a style binding looks like this. And really, this is just binding to the style attribute. And you provide an object, and we're going to set the border to a 3px solid red border. And this should be working, if we go over here and take a look at it. However, it's not yet conditional. So every head has a red border, not just the ones that are on sale. So we'll get to conditional in just a second, but first I want to mention that there are some CSS attributes that have hyphens in them. For example, background-color. But this isn't valid JavaScript. For this to be valid JavaScript, you have to add brackets around this because this is object notation here. But Vue actually makes this easier by allowing you to use camel case for CSS attribute names that have hyphens in them, so just keep that in mind. We don't need this though, so we'll just change this back to border. So for this to be conditional, we need to not just have it be hardcoded to a string, so we can just change that to bind to a computer property on the component. So instead of this object here, we're just going to bind this to headBorderStyle. Now the style binding will be set to whatever object is returned by headBorderStyle. So let's go add a computed property for that. So that's a method, and it's just going to, for now we'll have it just return border, and we'll hardcode that again to 3px solid red. Okay, so this still isn't dynamic. We still are just getting a red border on everything. But now, because this is a computed property, we could just use a ternary here. So let's bring this down onto a separate line, and instead of always setting border to this string, we'll set it to a ternary statement. We'll say if this.selectedRobot.head is onSale, then return 3px solid red. Otherwise, return 3px solid gray. Okay, let's go check that out. Okay, it looks like this is working great now. So now only the items that's on sale has a red border. Okay, one last thing to be aware of is up here in our style binding, sometimes it's necessary to apply styles based on multiple calculations. In that case, we could add an array, or bind this to an array instead. And this could be a second calculated property so that it applies these styles, the headBorderStyle first, and then moreStyles second. And moreStyles will override headBorderStyle, so the second one overrides the first if there are any conflicts. We don't have a need for that, though, so we'll just go with the simple object syntax. Of course, it's better to use classes than inline styles, so now let's take a look at how to conditionally apply CSS classes.

Bind style
:style="{ border: '3px solid red'; }"
:style="{ [background-color]: red }"
:style="{ backgroundColor: red }" ->  Vue syntax with camelcase

It is needed to add square brackets when use css attributes has hyphen because it is object notation.

Vue makes it easier by allowing camelcase syntax


:style="[headBorderStyle, otherComputedStyle]"


 :class="{ 'sale-border': selectedRobot.head.onSale }"

 But it is better to put this logic inside the computed property

# saleBorderClass -> it returns a string class
<div class="top part" :class="[saleBorderClass]">


3.14 - Conditionally Applying Classes with Class Bindings
Let's see how to replace this style binding with a class binding so that we can use classes instead of inline styles. First, let's start by adding a class down here. We'll call it sale-border, and that will just have a border that is 3px solid red. And then back up here where our style binding is, instead of this we'll use a class binding. And then a class binding is basically an object where the keys are the names of the classes that you would like to toggle. So in this case, we have a sale-border class. And then you just set that to a Boolean expression that will evaluate to true when you want this class to be applied. So in this case we want it to be applied when the selectedRobot.head is onSale. So this is just saying apply the sale-border class when the onSale property is true. And if we wanted to toggle multiple classes, we would just add more properties to this object. So this should be working just like the style binding was. So the Friendly Bot is on sale, and the rest are not on sale. Perfect. Now one thing that you might not have noticed, if we inspect this, this div where we applied the sale border, also has the classes top and part. If we go over and take a look at our template, you can see that this element has both a class binding and a class attribute on it, so the top and part classes are going to always be applied, and the sale-border property is going to be applied conditionally, so you can combine them like this. Of course, this class object could get fairly complex if you were toggling lots of classes. So you could always move this expression to a computed property like we did with the style binding. But like style bindings, there's another syntax that we could use here, an array syntax. So I could just provide an array here, and that array contains the classes that I would like to apply. So this is not conditional; this will always apply a class, so we should be seeing that everywhere. But we could then take this and, let's undo a little bit and grab this expression, and with this array syntax, let's put in a, let's use a computed property like we did with our style bindings. So I'm going to create a computed property called saleBorderClass, and we will add the value of that to our array. So now down in our computed properties, I can change this to saleBorderClass. And then this is just going to return the saleBorder string if the robot head is on sale, so we'll just use a ternary like this. So if it's on sale, then return sale-border. Otherwise it'll return an empty string. And we need this here. Okay, so that should be conditional again. There we go. And now that we have that using the array syntax, we could actually collapse these class expressions into a single expression. So I'm going to take these out of here and make them strings in here. And then I can get rid of this class attribute, and now it's all taken care of in our class binding. Cool, I like that final syntax, so let's go with that. And next, we'll take a look at using CSS preprocessors like Sass.


3.15 - Using SASS and Other CSS Pre-processors
Vue.js fully supports using CSS preprocessors if, for example, you want to use something like Sass instead of plain old CSS. In fact, the zero-config web pack configuration that comes with the basic CLI includes all of the web pack config to support Sass, Less, and Stylus. All you have to do is npm install the appropriate loaders if you want to use them. So here in our terminal, I'm going to just npm install node-sass and sass-loader and save that. Let's go ahead and install that. And since the built-in web pack config is already set up to handle the Sass loader, we can just jump in using that in our project. So all we have to do to support Sass is come down to the Style section, and up here at the top where we define our style tag, all we need to do is specify the language used here, so I can say lang=scss. And now I can start using Sass syntax in here, so I could, for example, wrap this inside of the part class, and then if we come back over here and start our server again and then come back over to our browser and refresh, you can see that all our styles, so these images, are still the correct size, even though we added the Sass syntax for sizing them. So that was surprisingly easy, and you can see how the zero-config environment made that really simple. Of course, if you wanted to use a CSS preprocessor other than Sass, Less, or Stylus, you could do that, but you would have to go in and modify the web pack config, and we'll talk about that in the deploying to production module. But out of the box, those three are already supported. And now our robot builder is using Sass. This wraps up our discussion of styling our components. We're going to next take a look at the different component lifecyle hooks that we can tap into.


$ npm install node-sass sass-loader --save-dev


And since the built-in web pack config is already set up to handle the Sass loader, we can just jump in using that in our project.

Now just need to add the language scss the the style tag which you want to use the SCSS preprocessor.

<style lang="scss" scoped>


3.16 - Using Component Lifecycle Hooks
       There are several lifecycle hooks that we can tap into to take an action based on the various lifecycle states of a component. Let's take a look at the created lifecycle hook. A typical use case for lifecycle hooks is to fetch data from a API when a component is first created, but we're not ready to do that just yet. We'll implement that exact use case later in the module about state management when we start using an API. For now, let's just make it so that whenever this RobotBuilder component is created, we log something into the console. So all we need to do is add a created function like this. And then we can just console.log in here. And tapping into a lifecyle hook is that easy. Let's go check this out over in our browser. So let's open our console and clear it, and then I'm going to refresh this. And when this page loaded, the RobotBuilder component was created. And then you can see down here we got this component created message. And again, this isn't a great use case, obviously, but it's pretty common that you'll do things in here like fetch data from an API that's needed for this component. There are a handful of lifecycle hooks, but covering all of them is beyond the scope of this course. If you want to explore more about lifecyle hooks, you can check it out here in the Vue documentation. They provide this lifecyle diagram that shows all of the different lifecycle hooks, beforeCreate, created, beforeMount, mounted, beforeUpdate, updated, and beforeDestroy, and finally, destroyed. And it shows you in this diagram here where in the lifecycle of a component each of these hooks gets called. And again, we'll touch on this more later in the course. If you want to look at it right now, to explore lifecycle states further, you can check it out in the Passing Data to Parent Components clip, which is inside the Enabling Intercomponent Communication module, or you can also look at it in the State Management module when we start talking about making API calls. For now, let's move on and take a look at mixins.


lifecycle hooks

There are several lifecycle hooks that we can tap into to take an action based on the various lifecycle states of a component. Let's take a look at the created lifecycle hook.
A typical use case for lifecycle hooks is to fetch data from a API when a component is first created.

To use the created lifecycle hook just add it to the export default object:

created() {
}


3.17 - Reducing Duplication with Mixins
        Let's see how to do that. Let's take this created lifecycle hook and move it into a mixin. So we'll grab it from here, and then let's create a new file called created-hook-mixin.js. And then here we'll just export an object. So basically, we're just export a component configuration object here, and whatever is in this object will be merged in with any components that you use it in. So to use it, let's go back into our RobotBuilder, and we're going to import our createdHookMixin from created-hook-mixin. And then we're just going to use this down here in a mixin property, so mixins, and then this is just an array of mixins, and we're only going to have one, the createdHookMixin. Cool. Now this mixin can be used in multiple components. Right now, we're just going to be using it in this one. And if we come back over to our web app and open our console and refresh, you can see our component created messages still getting logged. And so our created hook is still working, but it is now extracted out into a mixin that could be reused. Again, our application isn't quite mature enough yet for a great example for mixins. If you want to see a better example of this, in the Managing State with Vuex module, we talk about it when we have a few components that all need the same data, so we'll create a mixin in order to share the logic that will be used to fetch that data across multiple components. You can find that in the clip on Using Actions to Work with APIs and Asynchronous Data. I just wanted to talk about it a little bit here in the components section so that you knew about it. And just be aware, you can use a mixin to share any component option across multiple components including lifecycle hooks, props, computed properties, etc.


Mixins are a way to share functionality across multiple components. Basically, any component option can be extracted out into a mixin file, and then when you import the mixin, it will be merged into the rest of your component options.


It will be merged in to any component that use it.


You can use a mixin to share any component option across multiple components including lifecycle hooks, props, computed properties, etc.


3.18 - Summary

Creating Components
Using Bindings to Display Data and Handle Events
Conditionally Displaying Elements with v-if and v-show
Repeating ELements with v-for
Styling Components
Working with Compoment Lifecycle Hooks
Reducing Duplication with Mixins

-------------------------------------------------------------

-> 4 - Enabling Inter-component Communication

--> 4.1 - Introduction

Using Props to Share Data with Child Components
Validating Component Props
Passing Data to Parent Components with Events
Injecting Conent into a Child Componet with Slots
￼
--> 4.2 - Creating Child Components
So far, we haven't really done much with creating child components, other than the fact that our App component uses our RobotBuilder component. If we take a look at this RobotBuilder template, you can see a lot of repeating code here for each of the individual part selectors. Let's turn this into a part selector component and reuse it in each of these places. When we do that, we'll need to pass down to the PartSelector component the parts that we want it to select from, and that will be a great way to show how to communicate between components. So we'll start by creating a PartSelector component, and rather than completing this whole thing from scratch, let's start with a partially completed component. So over here in our helper repo in the src, build folder, we have this PartSelector.vue file. So let's grab that and paste that into our new component. So if we take a look at what we've pasted in here, you can see that at the top here we have some HTML that looks a lot like the HTML that was being repeated multiple times over in our RobotBuilder. And then down here in the component script, you can see that we have some functions for getting the next and previous index, and down here methods on our component for selecting the next part and the previous part that call those functions. This should look a little bit familiar because this same code, or code a lot like it, existed over in our RobotBuilder. So we've just moved that over into our PartSelector. And then notice up here, we're importing all of the available parts, and we're setting, here on line 13, this parts variable to the heads from the availableParts. This is just temporary so we can get up and going. The parts for the PartSelector will actually be passed into us by its parent component, so we'll delete this pretty quick here. So just to bring you up to speed with what the plan is, if we look at our robot builder, each one of these parts is going to be a different instance of the PartSelector, and the RobotBuilder will be responsible for giving each instance of the PartSelector the correct list of parts for it to work with. So in the RobotBuilder, when we create this instance of the PartSelector, it will pass in a list of heads, and when it creates this one, it will pass in a list of arms, etc. This will be a great way to learn how to communicate with child components. And now that the PartSelector will be taking care of all of the selecting of the parts, then over in our RobotBuilder we can delete a bunch of stuff here. So we can delete these functions here that we saw exist now over in the PartSelector, and then we can delete all of these functions down here. And notice how many of these there are that we're going to be deleting, and all of these will be replaced with just two functions in the PartSelector. So you can see how this is going to be eliminating duplication, and it's going to be a lot cleaner. All right, and then we're not going to needs these selected indexes here, either. And then we're just going to initialize each one of these parts in our selected robot to just an empty object, so each one of these will be just initialized like this. And actually, now that this doesn't have any complex calculations anymore, it doesn't really need to be a computed property, so let's just move this up to our data object. And this will just be a property instead of a function, and it'll just return this object. And now we're just going to go ahead and import our PartSelector. All right, and then this is something that you may not have noticed in the App component, but whenever you reference a child component, not only do you need to import it; you also need to list it in a components array on the parent component like this. This is what makes our component aware of this selector so that we can now use it up here. Okay, so now we're going to replace each one of these with just a PartSelector. So we have one at the bottom for our base, three in the middle for the left arm, torso, and right arm, and then up here in the head, we have a little bit more going on. So we can go ahead and replace all of this here with the PartSelector, and we can get rid of this div here. This stuff, however, we're going to want to reuse later, and so I'm just going to comment that out for now. Okay, so now we can use these PartSelector elements because we have declared them down here. Oh, and actually, this is not supposed to be an array; this is an object. So this is really an object where we're saying that we have a PartSelector component that is set to that PartSelector, but we can just use the shorthand syntax like this. But you can see already how much cleaner our template is because we cleaned up so much duplication. So let's go check this out. Okay, well, we've got all heads again, so not exactly what we want, but it is what we expected since our PartSelector is currently just hardcoded to return heads. To fix that, each instance of our PartSelector needs to receive its list of parts from its parent component, so we'll do that next. But you'll also notice that our arrows on our buttons are missing, and the buttons aren't exactly in the right place. So depending on where the PartSelector is, sometimes the buttons need to be on the top and bottom of the image, and sometimes they need to be on the left and right. So the PartSelector will also need to know what position it's in before it knows what type of buttons to display, so we'll fix that too. We'll get into all of that in the next clip when we start talking about how to pass data down to child components.
￼

--> 4.3 - Using Props to Share Data with Child Components
          We need to update our RobotBuilder to pass in the parts to the PartSelector for it to cycle through. So we'll start with this first one, which should allow the user to select which robot head they want. So that means over in our RobotBuilder, right here we want to tell the PartSelector which parts to use, and we'd like to do that like this. So availableParts is already available to us in our RobotBuilder's data object, and then we're just grabbing the heads off of it. And notice that we're binding it to a parts attribute of the PartSelector. This won't work yet because the PartSelector doesn't have a parts attribute to bind to. We'll add that next. We can do that over in the PartSelector by just adding props to the component like this. And then the most simple syntax for this is just to pass in a string array. And that's all there is to making props available to be bound to by parent components. And now that we have that, we can stop hardcoding the parts up here, which means we don't need this import here.

          And then down here inside the component wherever we're using parts, this needs to be this.parts now, since we're getting that off the props. Okay, so now that we have that prop, let's go ahead and pass in the correct parts in each of these instances. I'll just copy and paste this. And this is torsos, and this is arms again, and then this one is bases. Cool, let's go see how this looks. Awesome, now we're getting the correct parts, even though the arms aren't quite positioned right. And even though our buttons are still missing their arrow icons and aren't quite positioned right, if I click them, they do work. And you can see our PartSelector even supports indicting if a part is on sale. Now in order to fix the arm positions and display the buttons correctly, we need to apply a CSS class to each one of these PartSelectors based on the position of each part selector. So for example, this part selector for the head is in the top position. This left arm selector is in the left position, this one's in the center position, this one's in the right position, and this one's in the bottom position. And if we take a look at the PartSelector down in the styles, you can see that I've already created CSS classes to handle displaying those correctly. But these position classes aren't being applied yet anywhere in our PartSelector component, and that's partly because the PartSelector component doesn't know what position it's in. So let's come back over to the RobotBuilder, and in addition to specifying the parts for each one, let's specify the position. So I'm going to set position=top. And notice there's something different about this binding. Notice the parts binding is using a colon, but the position is not. That's because position isn't really actually a binding. It's really just an attribute on the PartSelector, and we're setting it to the hardcoded string top. Whereas parts is an attribute, but we're binding to that attribute and passing along availableParts.heads, which is an expression that needs to be evaluated. So let's go ahead and add this position to each of these others too. So we've got left and center, and then this is going to be right, and then finally down here for our base, this is going to be bottom. Okay, now we're passing to our PartSelector what position it's in, so over here we need to add a position prop so it can receive that value. And now we're just going to use that in a class binding. So up here in the template, right here on this div, in addition to the part class, I also want to bind to the position. So remember, we can specify both a class and class binding, and they'll get combined. And so in the case of the head, this div will have two classes, a part class and a top class. So whatever value is passed in to the PartSelector for the position prop will become a class here. And then based on those classes and the styles that we specified below, everything will get styled correctly. So let's go take a look at our component again. There we go. Now our buttons are all positioned and you can see that some are on top and some are on bottom versus left and right, and the arrows are all there. And that all came from our CSS styling. So just to review the important parts of this, we can pass data into child components using attributes like this, and for each attribute, you just need to specify props in the child component. It's really that simple to pass data to a child component. We can, however, take this a little bit further and actually validate the props that are passed to make sure that they're the right type, etc. Let's take a look at that next.

          Validating Props
          Our PartSelector component now takes in two props, parts and position, but there are no restrictions on the type of data or values that could be passed in to these props. We'd like to provide some validation to prevent parent components from passing in bad data. That's actually quite easy to do with a little different syntax. Let's start by requiring the parts prop to be an array and the position prop to be a string. So instead of using an array here, we'll use a keyed object where the keys are the names of the props, and the values are objects that specify validation information. So for the parts prop, we expect its type to be an array, and for position we expect its type to be a string. And now that we have these in place, if we come back over to our RobotBuilder, and on one of these, instead of passing in an array for the parts, we'll just pass in a string. And now if we come back over here, obviously, our left arm selector isn't going to be working because it's a string, not an array of parts. But if we take a look in our browser, you can see that we have a validation message here because we passed in an invalid data type for the parts. And you can see right here it says Expected Array but got String. So we now have type checking that can help us identify problems during development. So let's go back and fix that. And then we can also make our props required. So here I'm going to, in addition in to specifying type, specify required: true, and then we'll do that for position, too, because it's also required. And now over here in our RobotBuilder, let's not pass in the left position. So if we come back over here, let's clear this and refresh. Well, you might be surprised to see here that there is no message. There's no validation error, and that's because, if we look at what we passed in, we didn't pass in nothing. We actually passed in an empty string. And so because we are providing a value for a position, it's not triggering the validation message. If we remove this altogether, however, and come back over here, there, now you can see it's saying that there is a required prop that's missing. But what if we actually do want to ensure that users cannot pass in an empty string here? Essentially, we want to indicate what are the valid values for position? So we can do that with a validator function. So in addition to specifying that position is required, we're going to supply a validator function, and that is a function that takes in the value that's being passed in to the prop. And we just want to ensure that it is one of these values, left, right, top, bottom, or center. So basically, I just want to make sure that the value is included in that array, or that this array includes the values that's passed in. Okay, now because we are passing in an empty string, we should now be seeing an error over here, and sure enough, if we refresh here, you can see that we are getting an error that the custom validator failed for prop position. Cool, so let's go back to our RobotBuilder and pass position back in here, and then if I clear this and refresh, you can see we're not getting that error anymore. And our RobotBuilder looks great. So awesome, we're now validating the props that being passed into our child component. Next, we'll take a look at how to pass data back to a parent component from a child component.


Parent

# Here, we're binding it to a parts attribute of the PartSelector.
<PartSelector :parts="availableParts.heads" />


# Child
# Child should use the props in the component like this:

export default {
    props: ['parts'],
    data() {
      return { selectedPartIndex: 0 };
    },
    ...
}


:parts is an attribute which is binded.
position is a no binding attribute.

<PartSelector
  :parts="availableParts.heads",
  position="top"
/>
￼
# In summary, to pass data to the child component, it is needed to add to the component tag the attributes that you want to use
# inside the component child. Furthemore, in the child component you need to add a 'props' attribute to the component, which is an array
# that store strings of variables passed by its parents.
￼

￼--> 4.4 - Validating Props
           Our PartSelector component now takes in two props, parts and position, but there are no restrictions on the type of data or values that could be passed in to these props. We'd like to provide some validation to prevent parent components from passing in bad data. That's actually quite easy to do with a little different syntax. Let's start by requiring the parts prop to be an array and the position prop to be a string. So instead of using an array here, we'll use a keyed object where the keys are the names of the props, and the values are objects that specify validation information. So for the parts prop, we expect its type to be an array, and for position we expect its type to be a string. And now that we have these in place, if we come back over to our RobotBuilder, and on one of these, instead of passing in an array for the parts, we'll just pass in a string. And now if we come back over here, obviously, our left arm selector isn't going to be working because it's a string, not an array of parts. But if we take a look in our browser, you can see that we have a validation message here because we passed in an invalid data type for the parts. And you can see right here it says Expected Array but got String. So we now have type checking that can help us identify problems during development. So let's go back and fix that. And then we can also make our props required. So here I'm going to, in addition in to specifying type, specify required: true, and then we'll do that for position, too, because it's also required. And now over here in our RobotBuilder, let's not pass in the left position. So if we come back over here, let's clear this and refresh. Well, you might be surprised to see here that there is no message. There's no validation error, and that's because, if we look at what we passed in, we didn't pass in nothing. We actually passed in an empty string. And so because we are providing a value for a position, it's not triggering the validation message. If we remove this altogether, however, and come back over here, there, now you can see it's saying that there is a required prop that's missing. But what if we actually do want to ensure that users cannot pass in an empty string here? Essentially, we want to indicate what are the valid values for position? So we can do that with a validator function. So in addition to specifying that position is required, we're going to supply a validator function, and that is a function that takes in the value that's being passed in to the prop. And we just want to ensure that it is one of these values, left, right, top, bottom, or center. So basically, I just want to make sure that the value is included in that array, or that this array includes the values that's passed in. Okay, now because we are passing in an empty string, we should now be seeing an error over here, and sure enough, if we refresh here, you can see that we are getting an error that the custom validator failed for prop position. Cool, so let's go back to our RobotBuilder and pass position back in here, and then if I clear this and refresh, you can see we're not getting that error anymore. And our RobotBuilder looks great. So awesome, we're now validating the props that being passed into our child component. Next, we'll take a look at how to pass data back to a parent component from a child component.

￼

￼
Our PartSelector component now takes in two props, parts and position, but there are no restrictions on the type of data or values that could be passed in to these props. We'd like to provide some validation to prevent parent components from passing in bad data.

# Import data without validation
props: ['parts', 'position']

# Import data with validation. This data start to be required
# The required does not make the an empty string to trigger an error.
props: {
  parts: {
    type: Array,
    required: true
  },
  position: {
    type: String,
    required: true ,
    validator: function(value) {
      return ['left', 'right', 'top', 'bottom', 'center'].includes(value)
    }
  }
},


--> 4.5 - Passing Data to Parent Components with Events

          We now have a fully functioning PartSelector, and we're passing data from our RobotBuilder down to the PartSelector via its props. However, notice when I click this Add to Cart button that I'm getting weird results down here in the cart. This is because our RobotBuilder, which is the parent component, isn't aware of changes that are happening inside the PartSelectors, which are child components of the RobotBuilder.

           If we look at the code, you can see that the Add to Cart method expects there to be a selectedRobot, and in our data function up here, you can see that we are initializing each of the parts in that selectedRobot to an empty object. And before we extracted the PartSelector component, each of these parts was getting updated whenever the user selected a new part, but now that selection is happening inside our PartSelector child components. So when we click on each of these buttons, the RobotBuilder has no idea that anything has changed because these buttons are inside the PartSelector component.

           So we need a way to tell our parent component when a different part is selected. Let's take a look at how to create events in the child component that the parent component can bind to.


           This will allow the parent component to react to changes in its child components, and it will allow us to pass data back to the parent component from the child component. So over here in our PartSelector component, down here in the methods, you can see that we have these two methods, selectNextPart and selectPreviousPart. We want both of these to emit an event that parent components can listen to by binding to them.


           This is surprisingly simple with Vue. Each Vue component has an emit function available that we can call to emit an event.

           So right here in the selectPreviousPart function, down here at the bottom, I'm just going to call this.emit, and then I'm just going to pass in the name of the event that we want to emit. So let's emit the event partSelected.

           This now means that a parent component can bind to a partSelected event when it creates the PartSelector component. We'll see how to do that in just a sec. First, when we emit this event, we want to be able to pass along some data with it. It won't do us much good to let the robot builder know that a part was selected if we don't tell it which part was selected, so let's pass along the currently selected part like this. Remember, we have a computed property up here on our component called selectedPart so we're just using that here to pass it along. All right, and we're going to also want to emit that inside the selectNextPart function, so let's copy this and paste it here. Okay, cool. Now let's go see how to bind to this in the parent component. So over here in our RobotBuilder, up here we have our PartSelectors, and we'll start with this one here. We just want to bind to this new partSelected event.


           Binding to a component's event is done the exact same way you bind to any other element's event, with the v-on syntax or the at shorthand syntax. So we're going to bind to partSelected, and then we could bind that to a method on our component like this, but actually, I think that this is going to be simple enough. I just want to handle it inline like this.

           So this is a function that takes in a part. And then this is the PartSelector for the robot head, and so I want to set the selectedRobot's head to this part, so we'll do that like this. So remember, the selectedRobot is an object that we already have on our component, and we're just setting the head to this part that's being passed in. And that's it, easy peasy. All you have to do to pass data to a parent is emit an event in the child component and then bind to it like this. So let's go ahead and do this for the other PartSelectors. So this is the left arm, this is the torso, this is the right arm, and this is the base. Okay, so that's it; the RobotBuilder is now aware of the selected parts because we're binding to the partSelected events and setting the selectedRobot parts. So if we go back over to our browser now and select each of these parts and then click Add to Cart, you can see that that works just fine because the RobotBuilder is now aware of the data that's being passed back to it. But actually, we still have a small problem here. If I refresh this page and then click this Add to Cart button without changing anything, you can see that we're still getting our broken state. So it doesn't work when the page first loads, but if I change all of the parts and then click Add to Cart, you can see that it works just fine. This actually makes sense when you remember how we implemented the events. If we go back over to our PartSelector, you can see that we only emit the events when the selectNextPart or selectPreviousPart functions are called, and these are only called when the user clicks the buttons. So when the page first loads, the PartSelectors haven't emitted these events yet, and so the RobotBuilder doesn't have any selected parts. This is actually a great opportunity to tap into a component lifecyle method. So let's add a created function, and then let's emit the partSelected event when the component is first created. But instead of copying this line again, let's create a new function called emitSelectedPart, and then we will move this up into here, and then right here, we can just call this.emitSelectedPart. And then we'll do the same thing down here. And then in our created event, we'll also call it here. So now the currently selected part will get emitted when this component is created, in addition to when clicking the buttons. And you can see up here that in our data function, we initialize the selectedPartIndex to 0, so when the selectedPart component is created, the first part in the list of parts that's passed in is always the selected part. So we have a default selected part that will get emitted whenever this component is first created. So now if we go over to our page here and refresh, you can see that I'm not going to change any of these parts, and I'm going to go ahead and click Add to Cart, and now it's working just fine because those events got emitted. So this is working great, but it's a little bit hard to see the events as they flow in as we click on the buttons because we don't see that the events are working until we click the Add to Cart button. For that reason, in order to see this a little bit better, let's add a little preview image up here above this Add to Cart button that shows a preview of what our currently selected robot looks like. And as the events are emitted from the child components, you'll see the parent component changing. So we'll grab the HTML for that preview element over here in our GitHub repo. In src, build there is this RobotBuilder-preview.html, so let's grab that. And then we'll come back to our RobotBuilder, and right here at the top of the template inside the content div just above the Add to Cart button, we'll add that here. And then there's some styles for this too, so let's go grab those, so that's this RobotBuilder-preview.css. So let's copy that, and then back over here we'll just drop those in the bottom of our style section. Okay, let's go take a look at that and see what we've got. Okay, so you can see our preview is showing up here, so that's great, but the Add to Cart button is on top of it, so let's go fix that. So over here in our template, let's move our button into our new preview section. We'll just move that up here. And then down here in the CSS, we just need to find the Add to Cart style, and we'll no longer need this right position, and we want to change the width a little bit to just 210 pixels. Now let's go take a look at that. Okay, there we go. Now the Add to Cart button's below, and there's our preview image. And now that we have that preview image, we can see the events coming in as we change them by clicking the parts here. And you can see that the preview image, which is on the parent component, is changing as we change the parts in the child component. Okay, this is awesome, and this is a great example of how to emit events from child components to pass data back to parent components. Now I just want to take a short detour here to talk again about lifecycle hooks because we have a great use case now. If we go back and look at our PartSelector component, you can see that right here we are emitting the selected part in the created lifecycle hook. And then down here in the selectNextPart and selectPreviousPart methods, we are emitting it again. We could simply this a little bit by using the updated lifecycle hook, and that is called whenever the data for the component is updated. So let's change this created hook to an updated hook, and then let's come down here and just delete these so that they're not emitted. These aren't going to be necessary because when we click the buttons, we end up changing the data, and because the data is changed, the updated lifecycle hook will get called and emit our selected part. So now if we come back here, you can see that our data is not being updated, but if I click this, then updated is being called, but this isn't quite what I want because we started out with it blank. And so we actually need both updated and created. We need those both to called emitSelectedPart. So now if I refresh, now as I change the parts, then you can see that the preview looks accurate. Cool. I just wanted to take that little detour to show you how lifecycle hooks work now that we had a better use case. And this is awesome. Now we've seen how to pass data to parent components with events, and we learned a little bit more about lifecycle hooks in the process. Next, let's learn how to inject HTML or Vue content into a component.



We now have a fully functioning PartSelector, and we're passing data from our RobotBuilder down to the PartSelector via its props. However, notice when I click this Add to Cart button that I'm getting weird results down here in the cart. This is because our RobotBuilder, which is the parent component, isn't aware of changes that are happening inside the PartSelectors, which are child components of the RobotBuilder

# How to create events in the child component that the parent component can bind to.
# Each Vue component has an emit function available that we can call to emit an event.


# This now means that a parent component can bind to a partSelected event when it creates the PartSelector component.
selectPreviousPart() {
  this.selectedPartIndex = getPreviousValidIndex(
    this.selectedPartIndex,
    this.parts.length,
  );
  this.$emit('partSelected', this.selectedPart);
},



# Binding to a component's event is done the exact same way you bind to any other element's event, with the v-on syntax or the at shorthand syntax.

# This is a function that ta

 So this is a function that takes in a part. And then this is the PartSelector for the robot head
@partSelected="part => selectedRobot.head=part"

@partSelected -  It the name of the event that we created inside the child component
part - It is the second param from the $emit function in the child. It will be stored inside the first part variable.

selectedRobot.head - it is a object and its attribute from the parent component
part - the last part is first part. Now it is being used to store its date inside the parent attribute.


# Problem this event is only called when the bottom to change the image is clicked.
# If we try to add to cart without change any part of the robot. We wil get an error. This is because of the parent which has its values empty initially.

data() {
  return {
    availableParts,
    cart: [],
    selectedRobot: {
      head: {},
      leftArm: {},
      torso: {},
      rightArm: {},
      base: {}
    },
  };
},


# SO, now the the Hook Lifecycle comes in. After a child component is created. We need to make sure that the first part is sent back to the parent data.
That way we won't get an error as its values will be filled with the first part of the robot. To accomplish that, we need to use
the create Hook in the child as followed.


created() {
  this.emitSelectedPart();
},
methods: {
  emitSelectedPart() {
    this.$emit('partSelected', this.selectedPart);
  },
  selectNextPart() {
    this.selectedPartIndex = getNextValidIndex(
      this.selectedPartIndex,
      this.parts.length,
    );
    this.emitSelectedPart();
  },
  selectPreviousPart() {
    this.selectedPartIndex = getPreviousValidIndex(
      this.selectedPartIndex,
      this.parts.length,
    );
    this.emitSelectedPart();
  },

},

# So we create an event that emit the event to the parent.
# Then, them we call this event when button is clicked and the component is created (through the Hook created method)
# As a result, the parent will know which are the first parts of the robot to be used in the calculation.

---

# Now, notice that can remove the 'this.emitSelectedPart();' from the selectNextPart() and selectPreviousPart() methods
# because We could simply this a little bit by using the updated lifecycle hook, and that is called whenever the data for the component is updated.
# As you can see, the selectedPartIndex data is being changed inside the methods selectNextPart() and selectPreviousPart().
# Consequently, the updated hook will be called.

data() {
  return { selectedPartIndex: 0 };
},
computed: {
  selectedPart() {
    return this.parts[this.selectedPartIndex];
  },
},
created() {
  this.emitSelectedPart();
},
updated() {
  this.emitSelectedPart();
},
methods: {
  emitSelectedPart() {
    this.$emit('partSelected', this.selectedPart);
  },
  selectNextPart() {
    this.selectedPartIndex = getNextValidIndex(
      this.selectedPartIndex,
      this.parts.length,
    );
  },
  selectPreviousPart() {
    this.selectedPartIndex = getPreviousValidIndex(
      this.selectedPartIndex,
      this.parts.length,
    );
  },
},





--> 4.6 - Injecting Content into a Child Component with Slots
Sometimes you want to create a component that you can pass content into and have it be displayed in the appropriate place within that component. Imagine, for example, a component that is used as a collapsible drawer that expands and collapses as you click on a header, showing and hiding its content when clicked. In that case, you want a component to be reusable so that you can just wrap some part of your template in a collapsible component and it shows and hides that content. To experiment with this, we'll do just that; let's create a collapsible component that we can use to show and hide this preview image over here. And so over in our RobotBuilder, we want to be able to use it like this. So around this preview content, I want to have a CollapsibleSection component, and I'll wrap all of this content, the preview image but not the Add to Cart button, in that CollapsibleSection component. And then basically, this CollapsibleSection component will have a header that says expand and collapse, and when we click on it, it will show and hide this content. So let's go create this component. And I'm going to put that in a shared folder, since this is likely to be used by other components. And in there, I'll create a new file, CollapsibleSection.vue. And the template for this will be really simple, so I'll just type that in. So here's the template section of our component, and it's going to have an outer div, and then it's going to have an inner div that is the header, so we'll give it a header class. And then it's going to have a couple of spans in here, and those spans will say Collapse and Expand. And these are going to be shown or hidden based on whether the CollapsibleSection is currently open or not, so we will add a v-if, and we'll say if it's open, then show Collapse. And down here, if it is not open, then show Expand. And then on each of these spans we're going to bind to a click event, and we will just toggle open to not open, and we'll do that for both of these. And then I just want a down and up arrow here, so I'm going to add these Unicode characters. So that is an up arrow, and then we want a down arrow here. Okay, so there's our header, and then basically we want to be able to add right here our togglable content here. So this is where we want our injected content to appear, so we'll come back to that in a second. First, let's add our script block. And we're going to export our component definition object, and this component will be named CollapsibleSection. And it will have a data object which has the open variable that we're toggling with our click handlers up above. So our data object will just return a new object with open set to true by default. Okay, and that's it for the component script, and then we just need a few styles here, and we'll have those be scoped as always. And we just need to style our header, and I wanted it have a background-color of gray and a little bit of padding. And we want it to have a pointer cursor. Okay, so now we have a component that has a header, and when we click on it, it toggles the open flag between true and false. Now we just need to know how to display injected content right here where we want our togglable content. For that, we use slots like this. So this slot element is a Vue-specific thing, and now that we've added it here, when we create a CollapsibleSection element like we have over in our RobotBuilder over here, this content that we put inside of our CollapsibleSection will be shown right here where this slot element is. It's really that simple. Of course, since this is a collapsible section, we want to hide this slot when it's not open, so we'll put a v-if on here and only show it when open is true. Okay, so if we go back to our RobotBuilder component and we want to import this, and it looks like I must've missed something here. Yep, this CollapsibleSection needs to go down here actually. You may have already noticed that when I did it before. Okay, so if we come down here now and import our new CollapsibleSection component, so I'm going to import CollapsibleSection from ../shared/CollapsibleSection.vue, and then we can use this down here in our components. Now that is available to be used. And so now, this CollapsibleSection component should be working. Let's go take a look at that. There we go. Now you can see that we have a header here above our preview, and actually that's now working. I must've got my click handler wrong. Oh, yep, here I meant this to be equals not open. So basically, clicking on these spans will toggle the open variable. So now let's come back over here. And when I collapse this, there we go, so our collapsible content is working, and you can see how we injected content into our collapsible content using a slot. And then one last thing to be aware of, this may be a little less common, is the concept of default content for a slot. So in our CollapsibleSection, inside this slot element, I can provide any content that I want, so I could say here, div DefaultContent. And then this this will be displayed if no content is passed in. So let's add another CollapsibleSection here just above this one, and we won't provide any content for that. And now if we come over here, you can see that we have DefaultContent here instead of any data that was passed in because we didn't pass in any content here. And as soon as I pass in something here, then that will show instead of the default content. And that's all there is to working with slots. I'm going to go ahead and delete this. And that wraps up this module on inter-component communication.


# Sometimes you want to create a component that you can pass content into and have it be displayed in the appropriate place within that component.

# When you use a component tag with content inside. This content will be injected in a component tag called slot as followed:

RobotBuilder.vue
<CollapsibleSection>
  <div class="preview-content">
    <div class="top-row">
      <img :src="selectedRobot.head.src"/>
    </div>
    <div class="middle-row">
      <img :src="selectedRobot.leftArm.src" class="rotate-left"/>
      <img :src="selectedRobot.torso.src"/>
      <img :src="selectedRobot.rightArm.src" class="rotate-right"/>
    </div>
    <div class="bottom-row">
      <img :src="selectedRobot.base.src"/>
    </div>
  </div>
</CollapsibleSection>


---
CollapsibleSection.vue
<template>
  <div>
    <div class="header">
      <span v-if="open" @click="open != open">&#x25b2; Collapse</span>
      <span v-if="!open" @click="open != open">&#x25BC; Expand</span>
    </div>
    <!-- Toggleable -->
    <slot>

    </slot>
  </div>
</template>


Ways to import a component
components: { PartSelector: PartSelector, CollapisibleSection },

# If not content is sent to the slot, it will use its content to display something.
 <!-- Toggleable -->
<slot v-if="open">
  <div>DefaultContent</div>
</slot>

<CollapsibleSection /> and

<CollapsibleSection>
</CollapsibleSection>

are equivalent. I test it and both of them worked. Recheck it when you can.


-> 5 -  Routing from Page to Page


--> 5.1 - Introduction

All modern front-end frameworks provide some sort of routing mechanism for defining routes and navigating between pages in your single-page app. Vue.js, of course, is no different. In this module, we'll explore how to do this with Vue.

This will include

Adding routing to our app
Linking to routed pages
Styling links based on the active route
Navigating from code
Working with route params
Using nested routes
Using named views
Enabling HTML5 History Mode, and
Preventing navigation with navigation guards.


--> 5.2 - Adding Routing to Your App
          If we take a look at our App component, you can see we're importing the HomePage component and RobotBuilder component down here, but without routing the only way we've been able to see each of these pages is by replacing this element up here. What we really want do is make it so that we can get each of these pages and others by changing the URL or by clicking on links. In order to do that, we'll need to install routing. If you remember, when we first created our project with the Vue CLI, we had the option to select routing, but we opted not to. However, adding routing to an existing project is really quite easy. First, we just need to install the vue-router package. So over in my terminal, I'm going to stop my server from running, and then I'm going to npm install vue-router, and then I'm going to save that. Okay, and then let's go ahead and start up our server again. And then back over in our app, we just need to have a place where we can define all of the routes for our application, so let's create a new router folder, and inside there we'll create a new index.js file.

          Okay, now inside here we're just going to import Vue, and then we just need to import the router, and we'll import that from vue-router that we just installed. And now we just need to tell Vue to use the router like this. So now Vue is aware of the fact that our application is going to use routing. And then we just need to export a new router. And then we just need to define the routes in here, so we pass into this a router configuration object, and then it has a routes property, which is an array. Okay, now we're ready to add our first route. This will be a route to our HomePage, and it will look like this. So it's an object that has a path property, and this is the URL that when Vue sees that this is the URL in the browser it should navigate to this route. And we'll give this route a name; we'll call it Home. And then we need to tell it which component to load when this route is navigated to. So we're going to tell it to load our HomePage component. And then we'll just have to import that up here. Okay, so this is our first route. This just says when I navigate to this URL, then display this component. And then this is just the name that we're giving to our route, and we can use that in various places in our code. So this is pretty simple. And while we're in here, let's go ahead and create a route to our RobotBuilder too. So let's copy this, and we'll add another one, paste that in here. And the route for our RobotBuilder is /build, and we'll name this route Build, and then we just need it to render the RobotBuilder component. And we'll just have to import that. Okay, so this is our routes file all built out for the two pages that we currently have in our application. Now we just need to pull these routes in when we create our Vue instance so that Vue is aware of them. So let's import our new router, and then we just need to add that to our Vue configuration object here. Okay, so now our Vue instance is aware of our routes. The last thing we need to do is tell our app where to display routed components. So over here in our App component, right here where we've been hardcoding the component that we want to display, what we really want to do instead is display the component that matches our current route. We can do that by replacing this with the router-view tag. So now Vue will display the component that matches the current route right here, and we don't need these imports anymore, and we don't need this components property anymore. Okay, cool, let's go check this out. So if we come over to our browser and put in this URL, we're navigating to the root of the website, you can see that it loads the home page. You may notice, however, that it also added this hashtag, and this part of the URL after the hashtag is currently what Vue is looking at for matching the routes. And we'll talk later in this module about how to get rid of that hashtag using the HTML5 history mode. But for now, I can navigate to my pages by changing the route here, so now I want to navigate to /build, and you can see that takes me to my robot builder page. Okay, awesome. So our routes are working great, but the only way we have to get around is by manually changing the URL. Let's go see how to create links to these routes.




Without routing the only way we've been able to see each of these pages is by replacing this element up here. What we really want do is make it so that we can get each of these pages and others by changing the URL or by clicking on links. In order to do that, we'll need to install routing.



# Install router


$ npm install vue-router --save





# Place to declare all router of our application

# router/index.js

# Okay, now inside here we're just going to import Vue, and then we just need to import the router, and we'll import that from vue-router that we just installed.
import Vue from 'vue';
import Router from 'vue-router';

# Tell Vue to use the Router. Now Vue is aware that we will use routing.
Vue.use(Router);

# Then we need just export a new Router
# We pass here our Router configuration object. Here is where we will define our routes.
export default new Router({
  routes: [],
});


# Routes Property which is an array

this property will receive an object with the attributes to create a route.

1 - parth -> URL that the user will use on the URL
2 - name -> The route name. We can use in various places in the code.
3 - component ->  which component to load


Then, import the partial of the HomePage here.

import Vue from 'vue';
import Router from 'vue-router';
import HomePage from '../home/HomePage.vue'
import RobotBuilder from '../build/RobotBuilder.vue'

Vue.use(Router);

export default new Router({
  routes: [{
    path: '/',
    name: 'Home',
    component: HomePage
  }, {
    path: '/build',
    name: 'Build',
    component: RobotBuilder
  }],
});


# Next you need to pull this routes inside the Vue application. That way Vue is aware of them.
# main.js

import Vue from 'vue';
import App from './App.vue';

import router from './router'

Vue.config.productionTip = false;

new Vue({
  render: h => h(App),
  router
}).$mount('#app');


# Now we need to say to our app where to display routed components.

# App.vue

# Now you just needed to create the tag router-view that the component that match that route will be render there.

<template>
  <div id="app">
    <header>
      <nav>
        <ul>
          <li class="nav-item">
            <img class="logo" src="./assets/build-a-bot-logo.png">
            Build-a-bot
          </li>
        </ul>
      </nav>
    </header>
    <main>
      <router-view />
    </main>
  </div>
</template>



--> 5.3 - Linking to Routed Pages

Now that we have a couple of routed pages, let's see how to link between them. We'll start with this Get started link right here. So over in our HomePage component, you can see that we have this Get started link right here, and it's just an anchor tag. In order to link to a route, we instead need to use Vue's router-link element like this. And then instead of an href attribute, we use a to attribute, so we're going to route to this URL, or this route, and I'm going to just say /build here. So I can put in a string here that represents the URL for one of the routes that we've added, and then I just need to add the correct closing tag here. And now if we go check this out, I can now click on this Get started link, and there we go, it navigated me to the build page. So that's working now, but how do we get back to the home page? Let's make this logo and text here a link to the home page. This will give us chance to look at a little bit different syntax. So this is going to be in our App component, and that's up here in our nav section. So you can see here, here is my logo, and here is the Build-a-Bot text, so let's go ahead and add a router-link around the logo and text. And then in our last example, we just used to, and we bound that to a URL like this. Instead of using this syntax, let's actually use a binding here, and we're going to pass into it an object. And in this object, I'm going to specify the name of a route, so I want to navigate to the home route here. And if you remember, over in our router index file, each of our routes we gave a name, and so we're routing to the route that has a name of home, which is going to be this route here. So let's go check that out. So over here, you can see that we have a link now for our text up here, and the logo, it's also a link. So if I click on that, you can see it takes me to the home page. The only problem is that we don't want this link styling that we have here, so let's go add a class for that. So back over here on our router-link object, let's add a class, and that class will be nav-link. So notice that I can put a class on a router-link element just like I can any other element. And then down here in the styles, let's just add that nav-link class, and we'll set text-decoration to none, and we'll tell the color to be inherited. So this will avoid changing the color of the link. Okay, so if we come back over here, there we go, now our link is styled so I can go back to the build page and then back again to the home page. And this looks great. So now that we know how to link to our routes, let's go see how to style the currently active link based on the current URL.


# In order to link to a route, we instead need to use Vue's router-link element


to = href from html

<router-link to='/build'></router-link>

to -> must be a item a valid route previous added.



# Another way of linking is using the :to binding which accept an object

# The way we are routing to route that has the name as 'Home'
<router-link :to="{ name: 'Home' }">
  <img class="logo" src="./assets/build-a-bot-logo.png">
  Build-a-bot
</router-link>


--> 5.4 - Styling Links Based on the Active Route
    It's really easy in Vue to set up a style that will be used on links that match the current route. It'll be helpful to demonstrate this if we have a couple of links up here in our nav bar. Right now we only have one for the home page, so let's add another one up here that goes to the build page, in addition to that Get started link. So in our App component, let's duplicate this list item and paste it here, and we'll change its router link to link to the build route, and then we can get rid of this image here, and we will just call this Build. Okay, so now we have two links in our navigation area, a link that goes to the home page, and a link that goes to the build page. And you can see those here, so this one goes to the build page, and this one takes us back home. Now let's make it so that the link that corresponds to the current URL shows up in a different color. So we can easily do that over here in our template by adding a class down here in our styles. So I'm just going to add a router-link-active class. And this is a special class used by Vue, and I'm going to just tell it to change the color to white. So this is a class that Vue applies to any links that match the current route. So let's see how that's looking. So over here you can see that the Build-a-Bot link, which links to the home route, is currently white because we are on the home page, but if I click on Build here, you can see that Build turned white. However, we have a small problem in that these are both white, and the home page one should not be white anymore. That's because Vue by default is using an inclusive match on the route. If you look at the URL, technically it includes both the HomePage route, which is just the slash, and the build route, which is /build, so they're both white. What we really want for this is for it to be an exact match on the full URL. We can do that back over in our template by adding an exact attribute to our router-link. So I'm going to add that on both of our router-links, and now over here that should be fixed. There we go. So now only the exact route that matches the URL is being highlighted, so that's working great. Now you might be wondering, what if I don't want my class name to be called router-link-active? So down here we called this router-link-active, which is required in order for this to work, but we can use our own class name here. So I'm going to use foo here, and then back up here I could add an active-class attribute here and set that to foo. So now it will use this as the active-class, and I could put that down here also. And that should be working just fine. But we don't really have a need for that; I kind of like just using the built-in router-link-active class, so we'll leave it like that. Next, let's take a look at how to navigate to a route from JavaScript code.


# It's really easy in Vue to set up a style that will be used on links that match the current route.

# This is a class given by Vue that it applies to any links that match the current route
# inclusive match on the route
.router-link-active {
  color: white;
}


# However, we have a small problem in that these are both white, and the home page one should not be white anymore. That's because Vue by default is using an inclusive match on the route. If you look at the URL, technically it includes both the HomePage route, which is just the slash, and the build route, which is /build, so they're both white. What we really want for this is for it to be an exact match on the full URL.

# To just apply to the current route, we need to add the exact attribute
<router-link class="nav-link" :to="{ name: 'Home' }" exact>
  <img class="logo" src="./assets/build-a-bot-logo.png">
  Build-a-bot
</router-link>

# If you would like to use a custom class instead of use the one provided by the Vue, you need to use a different attribute than exact.
It is called active-class


<router-link active-class="custom-name" class="nav-link" :to="{ name: 'Home' }">


--> 5.5 - Navigating from Code
           In order to demonstrate how to navigate to a route from within our JavaScript code, let's create a new page, and we'll use this page in the next few clips too, in order to demonstrate route params. But basically, we're going to create a page that, if we click on one of these parts like the head or this arm, it will take you to a page where it describes that part. So let's start by creating a parts folder, and then inside that folder we'll create a new component called PartInfo. And for that, we'll just have a basic template that looks like this. If you're following along, go ahead and pause this and type that in. And we'll have a pretty basic script section also that looks like this. So notice that we have a PartInfo component and that the data function is returning a part object, and that object has a title and a description. So this is just hardcoded to display this fixed text right now. We'll fix this later. Until then, let's go ahead and create a route for this and then update the PartSelector to navigate to this page. So over in our routes file, by the way, you may have noticed that I'm navigating by, on Windows I can hit Ctrl+P and then type in the name of a file to navigate to. So let's add another route down here, and that will be the parts route, and it will load our new PartInfo component. So let's import that component up here.

           Okay, so now that we have a route for this, let's go ahead and go navigate to it from code. So in our PartSelector component, let's add a click handler on our img component, so @click, and we could use a router-link here. There's no reason not use a router-link here, but we're going to navigate from code in order to demonstrate this. And you'll find better use cases for this where you might want to do some sort of processing or something before you navigate, but this will work to demonstrate it. So we're going to have that call a showPartInfo function, which we'll add down here in the methods. And here's where we'll tap into Vue's router in order to navigate. Because we injected a router into our Vue instance in our main.js file, we have a router available to us here like this. And all we need to do in order to navigate is call push and pass in the URL of the route to navigate to. And just like the router-link element, I can either pass in a URL string here, or I can pass in an object. We'll leave this as a string for now, and we'll change it to an object when we explore how to pass route parameters. Okay, let's check this out. So back over here, at first it seems like this is not clickable because my cursor hasn't changed, but if I go ahead and click on this, you can see that it did navigate me to the parts page. And this is happening via our programmatic navigation. Okay, cool, let's just change our pointer styling so that it looks like this is clickable. So back in our PartSelector, you can see up here that we already have a class on here on this div that is surrounding the img, and it's class=part. So down here, we should find that class, a class that targets that already, right here, part img. So in here let's just add cursor: pointer. So now you can see I'm getting a pointer here, and when I click on it, it takes me to this page, but it's still displaying hardcoded information. This is not displaying information about the part that I click on. For that, we'll need to pass some route params to our parts component. So in the next clip, we'll start exploring working with router params.


# In order to demonstrate how to navigate to a route from within our JavaScript code, let's create a new page, and we'll use this page in the next few clips too, in order to demonstrate route params.


# Okay, so now that we have a route for this, let's go ahead and go navigate to it from code. So in our PartSelector component, let's add a click handler on our img component, so @click, and we could use a router-link here. There's no reason not use a router-link here, but we're going to navigate from code in order to demonstrate this. And you'll find better use cases for this where you might want to do some sort of processing or something before you navigate, but this will work to demonstrate it.


<template>
  <div class="part" :class="position">
    <img @click="showPartInfo" :src="selectedPart.src" title="arm"/>
    <button @click="selectPreviousPart()" class="prev-selector"></button>
    <button @click="selectNextPart()" class="next-selector"></button>
    <span class="sale" v-show="selectedPart.onSale">Sale!</span>
  </div>
</template>

# Here 'this.$router.push('/parts');', it could be like the router-link and pass an object instead of the route URL.

<script>
  ...
  methods: {
    showPartInfo() {
      this.$router.push('/parts');
    },
  }
   ...
</script>


--> 5.6 - Working with Route Params
          Our PartInfo component is just currently hardcoding the title and description here on the page. What we'd like to do is to be able to specify the part type, like heads, and the part index, and then use that information to look up that part and display its info. In order to do that, we're going to have to update our route to expect those parameters, and then we need to grab those parameters off of the route in our component. So let's update the route first. So first, we need to update the URL for this route to add the params and use a colon here followed by a variable name, so partType, and then :id. So this route now expects a part type like head, arm, torso, etc., and then a part id. With this information, we'll be able to look up our part from our parts list and display its information. So now let's go over to our PartInfo component and update it to grab these route parameters. So first we'll import our parts data. We'll import parts from data/parts. And now we'll need a computed prop, so let's add computed, and we'll have a part property that is a computed prop. So we'll return an object here, and that will look like the one down here in data. I'm just going to cut this out of here and paste it into here, and now we can get rid of data; we don't need that anymore. And then this is what we want to do the lookup for us from the params. So we want to look up the part and get the title and description for that part based on the params that are passed in on the URL. So the route params are available to us on the component's route property, so we can get the partType, for example, like this. We're going to say this.$route.params.partType. And then this partType right here needs to match the parameter name over here. So with that information, Vue can parse the partType off of the URL, and then we can get the ID in the same way. So id = this.$route.params.id. Okay, and this is red because our linter is telling us that we should prefer destructuring here, and so I can change this to look like this, set partType and id using destructuring, and we'll set it to this.$route.params. Okay, so now I can use this to look up the parts, so instead of returning this hardcoded object, I'm going to do a lookup on the parts array where the partType is the partType that I get off of the params. So remember that the parts object that we're getting, that we're importing, is a keyed object where the partType is the key, and then that returns an array of that partType, so then I'm going to do a find, and I'm going to find where the part.id equals the id from params. But actually, there's a problem here, and that's because the params that are pulled off a URL are always strings, whereas the id's on the parts in our data are integers. And so this triple equals actually isn't going to work because it's not going to find a part with an id that is a string. So we can fix that by casting id to be a number here. Okay, so now we have our router set up with params, and we have our component set up to use those params. The last thing that we need to do now is just pass the params from the PartSelector component. So over here in our PartSelector, down here in our showPartInfo function, we want to pass the URL parameters here for PartType and id, but we can't pass part params using the string syntax; we actually need to use the object syntax in order to pass parameters. So I'm going to change this to an object and use a named route where the name is Parts, and then I can pass params. And then I'm going to specify that the id param is this.selectedPart.id, and the part type is this.selectedPart.type. Okay, let's clean this up a little bit. We'll bring this down here, bring this down, and we'll bring this down. Okay, so now we are saying navigate to the parts route and pass in the params id and partType, and we're going to get those off of the currently selected part. Okay, let's go check that out. So back over here, now if I click on one of these parts, there we go. Now we are navigating to parts/head/1, and we get a description of that part, a Large Cyclops. And if I change this to this part, now it is the Friendly Bot head. Okay, before we wrap up on this, let's just demonstrate that this is also possible using links instead of code navigation by changing this link to be a router-link rather than navigating from code. So back in our PartSelector up here, let's get rid of this click binding, and then let's wrap this img in a router-link, and then we'll use a to binding. And let's grab the route expression down here from this function. I'm going to cut this out of there, and then we don't need this function anymore. And then I'm just going to paste that expression in here. And I'm just missing a closing bracket here, there we go. Okay, so this is just the same as when we were navigating with code, so I can click on these and go to the parts page with the params. Awesome. So this is working great, and we're passing parameters between components using router-link. But next we'll see how to decouple our PartInfo component from the router by passing the route params as props instead.



# How to get parms from the routes

const partType = this.$route.params.partType;
const id = this.$route.params.id;

eslint said tu us object destructuring

const { partType, id }  = this.$route.params;



return parts[partType].find(part => part.id === +id);

=== expected the the id variable have the same that as the pard.id which is integer

To cast(convert?) the id given by the params which is integer to integer, you need to add a + sign before the variable you want to
transform into integer


parts is a part object that has keys as the type of the robot

---
To pass params through routes the string syntax won't work.
So we need to use the object syntax.


showPartInfo() {
  this.$router.push('/parts');
},



####

 <img @click="showPartInfo" :src="selectedPart.src" title="arm"/>

 showPartInfo() {
   this.$router.push({
     name: 'Parts',
     params: {
       id: this.selectedPart.id,
       partType: this.selectedPart.type
     }
   });
 }
#

# They are equivalent

<router-link :to="{
  name: 'Parts',
  params: {
    id: this.selectedPart.id,
    partType: this.selectedPart.type
  }
}">
</router-link>

<img @click="showPartInfo" :src="selectedPart.src" title="arm"/>


-> 5.7 - Passing Params as Props
         One downside of using this route expression is that it couples this component to the router. What if we wanted to use this component as a child component somewhere else and pass the partType and id as props instead of pulling it off of the route params? Well, we can make this work both as a routed component and as a child component by updating the route for this component to pass the params as props.

         So we can do that over in the route simply by setting the props property to true on this route. So now Vue will pass the route params that it identifies on the path for this route as props instead of as route params. And with that simple change, we can come over to our PartInfo component and add props for the partType and id, and now instead of getting partType and id off of this.route.params, we can just get it off of this, which is where the props are. And it's that easy to decouple our component from the route. You can see over here that that is still working just fine. But let's add a little bit of validation to these props. So we'll change the props to an object, and it will have a partType, and we want it to be of type: String, and it will have an id, which will be of type: Number. But the problem with this is that when this component is used as a routed component, this id will still be passed in as a string, so we need to allow either a number or a string. But just to be sure that nobody passes in an invalid value here, let's also add a validator. And then we'll just verify that this is a number, so we'll call Number.isInteger, and then we will cast the value to a Number. Okay, so now we have some validation around our props, and if we come back over here, this should all still be working just fine. Great, now we know how to use route params and how to pass those parameters in as props. Now let's explore nested routes.


# One downside of using this route expression is that it couples this component to the router.
# What if we wanted to use this component as a child component somewhere else and pass the partType and id as props instead of pulling it off of the route params?

# So we can do that over in the route simply by setting the props property to true on this route.

export default new Router({
  routes: [{
    path: '/',
    name: 'Home',
    component: HomePage
  }, {
    path: '/build',
    name: 'Build',
    component: RobotBuilder
  }, {
    path: '/parts/:partType/:id',
    name: 'Parts',
    component: PartInfo,
    props: true
  }],
});


Then you just need to get this data from the props

<script>
  import parts from '../data/parts';

  export default {
    name: 'PartInfo',
    props: ['partType', 'id'], # here <--------
    computed: {
      part() {
        # const { partType, id }  = this.$route.params; # Not need anymore
        const { partType, id }  = this

        return parts[partType].find(part => part.id === +id);
      }
    },
  }
</script>


# Now add validation to the props
# But just to be sure that nobody passes in an invalid value here, let's also add a validator. And then we'll just verify that this is a number, so we'll call Number.isInteger, and then we will cast the value to a Number.

props: {
  partType: { type: String },
  id: {
    type: [Number, String],
    validator(value) {
      return Number.isInteger(Number(value))
    }
  }
},

Cast a string as a number???

Number(value)
+value


-> 5.8 - Using Nested Routes
   In order to understand what we're going to build in order to look at nested routes, let's take a look at the final result. So we're going to be building this Browse Parts page, and notice up here the URL is parts/browse. And when we navigate to that, it shows us a list of all the different parts. But then as I click on each of the different part types, you can see that the bottom part of this page here is changing, but this top part that includes this menu is not changing. And notice the URL up here as I click on each of these is also changing. And so the URL is changing, but really all Vue is replacing is this bottom section down here. That is possible because of nested routes, so let's go take a look at how to build this. To get started, we'll create a new BrowseParts component. So I've created that here in the parts folder. Let's go grab the contents from that from our GitHub repo. So in the src folder, in the parts folder, there is the BrowseParts.vue file. So let's grab that and paste that into here. So there's not a lot going on here. We have a bit of CSS, and then up here we have a menu for the different parts. And then I'm going to need a new page for each of the different types of parts, so I'm going to create a new RobotHeads.vue and a new RobotArms component, and a RobotTorsos, and finally a RobotBases. And then I'm going to get the contents for each of these out of our GitHub repo from their corresponding files also. So here's RobotArms, and I'll paste that into RobotArms here, RobotBases, paste that in here, and then RobotHeads, and finally, RobotTorsos. And each one of these is really quite similar where you have a title and a description of the type of parts that we're dealing with on this page. And then you can see here that we have a v-for that is looping over all of the, in this case, all of the arms and displaying the title and description, whereas here, we're looping over bases and torsos and heads. And then in each one, you can see that there is a data function that's returning the corresponding part, so we have a heads property on the RobotHeads component, and we have an arms property on the RobotArms component, etc. So now the trick is how do we get each one of these pages to be viewed on the browse page underneath this menu whenever we click each one of the links for the different part types? Well, it starts with adding another router-view. You'll remember that we have a router-view already in our App component, and so we're adding a second one here. And now we can add routes for each one of these individual pages, RobotArms, RobotBases, etc. This is going to consist of a parent route for the BrowseParts page and child routes for each of the PartTypes. So over here in our routes we're going to create a BrowseParts route, and it's important that this goes above the existing parts route. I'll explain that in a second here. So right here I'm going to create a new route, and it's going to have a path of /parts/browse and a name of BrowseParts. And the component is going to be the BrowseParts component, and we'll need to import that. And that has to have the .vue extension on it. Okay, now back to why it was important where this goes. Notice that this parts path where we're navigating to a particular part that it has parts followed by a partType. Vue has no idea when we type in browse here that we're not trying to type in a partType. And so if we would've put this down below, it would've got picked up first by this route, and so the order is important. Okay, so now we have this BrowseParts route, and we're going to need to add the child routes now for the individual part types. We do that by adding a children array like this. So the BrowseParts route now has child routes, and then we just need to specify the child route for each part type. So we're going to have BrowseHeads, and that's going to have a path of heads, and resolve to the component RobotHeads. And let's copy this and paste it for each of the types. And this one will be BrowseArms, path will be arms. Notice that this path is relative to the browse path, so the full path for arms is parts/browse/arms. And that will use the RobotArms component, and then we have BrowseTorsos, and the RobotTorsos component, and then finally BrowseBases. That's the bases path and the RobotBases component. So now let's go ahead and import each of those. Okay, so now we've created our nested routes, so we have our BrowseParts that has child routes for each one of the parts pages. Now all we have to do is create links for each one of these on the browse page. So back over here in the BrowseParts page, I just need to add a router-link around each one of these menu items. So, have a router-link, and then I'm going to use a to binding, and here I'm just going to specify the name of a route. And notice here that I can just provide the name of the child route. Okay, and let's fix this so that it wraps a little bit better. Okay, now we just want to do a similar thing around the rest of these. Okay, so we should be good to go. So we added a BrowseParts route, and it had child routes, and then we linked to each of the child routes here. Okay, so let's take a look. So instead of build here, we're going to navigate to parts/browse, and here we go. So now I can go to Heads and Arms and Torsos and Bases, and you can see that the data for the correct corresponding parts is loading down below. Awesome. So pretty simple to add child routes. Now let's go take a look at one more place where we can use a router-view, and that's with named views.

# Here order is important as

path: '/parts/browse'

browse would be catch first by the

 {
    path: '/parts/:partType/:id',
    name: 'Parts',
    component: PartInfo,
    props: true
  }

If it comes first than

{
    path: '/parts/browse',
    name: 'BrowseParts',
    component: BrowseParts,
    props: true
  }


export default new Router({
  routes: [{
    path: '/',
    name: 'Home',
    component: HomePage
  }, {
    path: '/build',
    name: 'Build',
    component: RobotBuilder
  }, {
    path: '/parts/browse',
    name: 'BrowseParts',
    component: BrowseParts,
    props: true
  }, {
    path: '/parts/:partType/:id',
    name: 'Parts',
    component: PartInfo,
    props: true
  }],
});


--> 5.9 - Using Named Views
          We just looked at nested child routes; now let's take a look at named views. You can almost think of named views as sibling routes. Whereas nested routes have a parent-child relationship, named views allow you to have multiple router-views on a single component, and the route for the component specifies which two or more views to display. To demonstrate that, let's add a sidebar to our app that will show up here on the left of every page. And each route in our app will be able to specify a different sidebar to display. Right now in our App component we have this main section down here that as a router-view in it. Let's also add an aside that we'll show to the left of this main section. So we'll give that a class of aside. And we'll wrap both of these in a container div. And let's go ahead and add those classes, so we have a container, and it's going to be display: flex with a margin of 10px auto 0 auto. And we will set justify-content to center. And then we need an aside class, and it's going to have a 30-pixel padding a background-color that is gray, 100-pixel width, and a min-height of 300 pixels, which matches the min-height of our main content area. Okay, as we add these asides to our site, we're going to have to make a couple of other small CSS adjustments in order to fit those in. So on our main element we're going to remove the margin auto, and we're going to change its width to 964 pixels. And then we're going to change the width of the header to 1184 pixels. Okay, that should take care of the styling. So now up here in the aside, we'll go ahead and add another router-view. However, so that we can target this router-view, let's give it a name. So we're going to add a name attribute, and we will name it sidebar. And we can leave this one without a name. And by default, if we don't give it a name, it has the name default. Okay, now we need some content to display in this sidebar. So let's create a sidebars folder, and in here, I will create a SidebarStandard component, and I will also create a SidebarBuild component. So the build page will have its own sidebar. And our standard sidebar is just going to look like this. So if you're following along, go ahead and pause this, if you'd like to type it in. And the only content up here is just the text, Standard Sidebar, and we have a sidebar class here that is giving it a font size of 50 pixels and rotating it 90 degrees. And that's really all that's going on here. And then let's copy and paste this into the build sidebar, and we'll just change this to say Build Sidebar, and we will name it Build. And just to make it stand out a little bit, let's give it a green font color. Okay, now let's come over to our routes, and up here on the route for our HomePage, we're going to change this component property to components, plural, and then we'll change that from a simple property to a keyed object. And this will have two properties, default and sidebar. Remember that these names now correspond to the names of our router views. This one has a name of sidebar, and this one has a name of default. So when our home page is displayed, we want the default router-view to display our home page. And then we want the sidebar router-view to display our standard sidebar, and we'll need to import that up here. And then let's do the same thing for our build route, except that the default router-view will display the RobotBuilder, and in this case, we want to display the build sidebar, so let's import that also. Okay, cool. So now because our main App component has two router-views, we have to specify them both, or we can specify them both, and we can indicate in the route which content to display in each one. So let's go take a look at this. And it looks like we have an error in our CSS, so let's go back to our App component, and down here in the styles I'm missing a colon right here it looks like. Okay, let's check this out. Okay, there we go. So we are on the build page and notice that on the build route that I have my robot builder, and I have the green build sidebar. And yet, if I go home, I have a different sidebar. This is the standard sidebar. And notice that if I go to the parts/browse page, that there actually is no sidebar here, or I should say there is no content in that sidebar. So this gray background is coming from the aside in our App component, which exists right here. So we have the aside here, and that has a gray background. But there is no content in it because we didn't give it a router-view on that page. So our route is not specifying a component for the sidebar router-view, and so it's blank. So it is optional to provide data here, but



# this is how you use named views in order to specify different content for different parts of the same page. Next let's go take a look at how to get rid of this hash sign in our URLs.


export default new Router({
  routes: [{
    path: '/',
    name: 'Home',
    components: {
      default: HomePage,
      sidebar: SidebarStandard
    }
  }, {
    path: '/build',
    name: 'Build',
    components: {
      default: RobotBuilder,
      sidebar: SidebarBuild
    }
  },
}

# Template

router-view without a name is set to default.

<div class="container">
  <aside class="aside">
    <router-view name="sidebar"/>
  </aside>
  <main>
    <router-view />
  </main>
</div>


--> 5.10 - Enabling HTML5 History Mode
    All of our URLs so far have had this hashtag in them. That's because we're not yet using HTML5 history mode. So let's turn that on, and then we'll talk about a challenge that is presented by using it. So all we have to do to turn it on is to come over to our routes, and in our router configuration object we just need to set the mode to history. And that's it. Now if we come over here and start navigating around our site, you can see that there are no longer any hash signs in our URL. I really like this approach because the URLs look more professional, but there is one consequence to this that you need to be aware of. Imagine somebody comes to this part/heads/1 URL, and then they bookmark it. And then they come back, they close their browser, and they come back later, and the click on that bookmark. Or let's just say they open a new browser and they type in this URL. Well, this works locally in development because behind the scenes we're using web pack DevServer in order to serve this, and it can handle this. But imagine you have this running on your server, and a user types in this URL or clicks on a bookmark to this URL, it's going to request this full URL from your server, so it's going to request /parts/heads/1 from your server. And your server doesn't actually have a document at that location. It has an index.html and some other files that are used for serving up your Vue.js single-page application, and your Vue.js application knows how to serve this URL, but your server doesn't actually know how to use it. And so you would actually get a 404 when you try to run this if you have not configured your server correctly. And that is not the case if you're using hashtag routing because only the part before the hashtag is sent to the server. Everything after the hashtag is handled client side. And so this is a problem only when you turn on history mode routing. So if you don't configure your server correctly, all of these URLs that people deep-link to will 404 when they try to hit them. Basically, you need to set up your server to always return the main index.html file whenever you load any URL like this. The way to do this varies depending on which webserver you're using. So the Vue documentation contains some instructions for some popular webservers. I'll talk more about this later in the Deploying to Production module in the clip on handling deep linking. I'll demonstrate how to do this with Express. But just be aware that when you turn on the HTML5 history mode that this is a concern that you have to take care of on the server. Next, we're going to take a look at navigation guards and how we can prevent users from navigating to or away from certain pages.



# Read this when you use it in production
